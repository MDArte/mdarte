#parse("templates/bpm4struts/forms/Form.java.vm")
#set ($generatedFile = "${action.fullFormBeanPath}.java")
##
##  CONSTANTS
##
#set ($hash = "#")
#set($Q = '"')
#set ($labels = false)
#set ($fields = $action.actionFormFields)
#set ($actionParameters = $action.actionParameters)
#set ($formBeanClassName = $action.formBeanClassName)
##
##  START TEMPLATE
##
#set($gerar = true)
#if($action.actionOldStruts)
#set($gerar = false)
#end
#if($gerar)
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: bpm4struts2/forms/ActionForm.java.vsl in andromda-bpm4struts-cartridge-coppetec.
//
package $action.formBeanPackageName;

import org.apache.struts.util.MessageResources;
import org.apache.struts.Globals;
import java.text.DecimalFormatSymbols;
import java.util.Locale;
#set ($hasTable = false)

public class ${formBeanClassName}
#set ($securityEnabled = $stringUtils.isNotBlank($securityRealm))
#if ($securityEnabled) 
    extends ${controleAcessoDir}.LoginFormImpl
#else
    extends org.apache.struts.validator.ValidatorForm
#end    
    implements java.io.Serializable
#foreach ($operation in $action.deferredOperations)
        , $operation.interfaceType
#end
{

    private final static DecimalFormatSymbols simbolosDecimais = new DecimalFormatSymbols(Locale.US);
    static 
    {
        simbolosDecimais.setGroupingSeparator('.');
        simbolosDecimais.setDecimalSeparator(',');
	}

    private final static int TAMANHO_MAXIMO_LABEL_DESTINO = 250;
#foreach ($field in $fields)

#if ($field.file)
    private java.io.File $field.name = null;
	private java.lang.String ${field.name}FileName = null;
	private java.lang.String ${field.name}ContentType = null;
#elseif ($field.table)
#set ($hasTable = true)
    private $field.type.fullyQualifiedName $field.name = null;
#elseif ($field.strutsAction.tableAction)
    private java.util.List ${field.name}RowSelection = null;
#elseif ($field.type.mapType)
    private java.util.Map $field.name = new java.util.LinkedHashMap();
#elseif($field.widgetType=="money")
    private java.lang.String $field.name;
#elseif($field.radioButton && !$field.type.enumeration)
#if($field.findTaggedValue("$radioSelected"))
#if($field.type.isStringType())
    private $field.type.fullyQualifiedName $field.name = ${field.name}Default;
#else
	private $field.type.fullyQualifiedName $field.name = ${field.name}Default;
#end
#else
	private $field.type.fullyQualifiedName $field.name;
#end
#elseif($field.type.enumeration)
#set($enumeration = $field.type)
#if (${field.widgetType}=="multibox")
	private ${enumeration.packageName}.${enumeration.name}[] $field.name = new ${enumeration.packageName}.${enumeration.name}[]{};
#else
	private ${enumeration.packageName}.${enumeration.name} $field.name#if($enumeration.defaultEmptyValue) = ${enumeration.packageName}.${enumeration.name}.VAZIO#end;
#end
#else
    private $field.type.fullyQualifiedName $field.name;
##if ($field.type.stereotypeNames.contains("ValueObject"))
##set ($vo = $field)
##processVOFields ($vo)
##end	
#end
## Adiciona um double para o caso do doubleSelect
#if ($field.doubleSelect)
    private $field.type.fullyQualifiedName ${field.name}__Double;
	private java.util.Map ${field.name}Map = null;

    public $field.type.fullyQualifiedName ${field.getterName}__Double()
    {
		return this.${field.name}__Double;
    }

    public void ${field.setterName}__Double($field.type.fullyQualifiedName ${field.name}__Double)
    {
    	this.${field.name}__Double = ${field.name}__Double;
    }
#end

#if ($field.date)
#set ($dateFormatter = "${field.name}DateFormatter")
    private final static java.text.DateFormat $dateFormatter = new java.text.SimpleDateFormat("$field.dateFormat");
#elseif ($field.time)
#set ($timeFormatter = "${field.name}TimeFormatter")
    private final static java.text.DateFormat $timeFormatter = new java.text.SimpleDateFormat("$field.timeFormat");
#end
##if ($field.doubleSelect || ${field.widgetType}=="multibox")
##	private java.lang.Object[] $field.valueListName;
##	private java.lang.Object[] $field.labelListName;
##	private java.lang.Object[] ${field.labelListName}Hints;
##	private java.lang.Object[] ${field.labelListName}Destination;
###end
#if (${field.widgetType}=="multibox")
#if (!$field.type.enumeration)

	public java.util.Map ${field.name}List;
	
	public java.util.Map ${field.getterName}List()
    {
		if(${field.name}List==null)${field.name}List=new java.util.HashMap();
		
		return ${field.name}List;
    }

	public void ${field.setterName}List(java.util.Map ${field.name}List)
    {
		this.${field.name}List = ${field.name}List;
    }

#else

	public java.util.Map ${field.getterName}List()
    {
		return ${field.name}List;
    }

#end
	public ${field.type.fullyQualifiedName}[] ${field.name}DefaultValue;

#if (!$field.type.enumeration)
	public ${field.type.fullyQualifiedName}[] ${field.getterName}DefaultValue()
    {
		return ${field.name}DefaultValue;
    }

#else
	public ${field.type.literalType.fullyQualifiedName}[] ${field.getterName}DefaultValue()
    {
		${field.type.literalType.fullyQualifiedName}[] result = new ${field.type.literalType.fullyQualifiedName}[${field.name}DefaultValue.length];
	
		for (int i = 0; i < this.${field.name}DefaultValue.length; i++) {
    			result[i] = this.${field.name}DefaultValue[i].getValue();
    	}
		
		return result;
    }
	
	public void ${field.setterName}DefaultValue(${field.type.literalType.fullyQualifiedName}[] ${field.name}DefaultValue)
    {
		this.${field.name}DefaultValue = new ${field.type.fullyQualifiedName}[${field.name}DefaultValue.length];
		
		for (int i = 0; i < ${field.name}DefaultValue.length; i++) {
    			this.${field.name}DefaultValue[i] = ${field.type.fullyQualifiedName}.${field.type.fromOperationName}(${field.name}DefaultValue[i]);
    	}
    }

#end
	public void ${field.setterName}DefaultValue(${field.type.fullyQualifiedName}[] ${field.name}DefaultValue)
    {
		this.${field.name}DefaultValue = ${field.name}DefaultValue;
    }

#end
#if(${field.widgetType}=="select" || ${field.radioButton})
#if($field.type.enumeration)
##
#else
	public java.util.Map ${field.name}ComboList;
#end
	public java.util.Map ${field.getterName}ComboList()
    {
#if(!$field.type.enumeration)
		if(${field.name}ComboList==null)${field.name}ComboList=new java.util.LinkedHashMap();
#end
		return ${field.name}ComboList;
    }
#if(!$field.type.enumeration)
	public void ${field.setterName}ComboList(java.util.Map ${field.name}ComboList)
    {
		this.${field.name}ComboList = ${field.name}ComboList;
    }
#end
#end
#end

    public ${formBeanClassName}(){
#foreach($field in $fields)
#if($field.radioButton)
#if($field.findTaggedValue("$radioSelected"))
#if($field.type.isStringType())
    	${field.setterName}(${field.name}Default);
#else
		${field.setterName}(${field.name}Default);
#end
#end
#end
#end

#foreach ($field in $fields)
#if ($field.date)
#set ($dateFormatter = "${field.name}DateFormatter")
#set ($lenient = !$field.strictDateFormat)
        ${dateFormatter}.setLenient($lenient);
#end
#end
    }

#foreach ($field in $fields)
#if ($field.date)
#set ($dateFormatter = "${field.name}DateFormatter")
#elseif ($field.time)
#set ($timeFormatter = "${field.name}TimeFormatter")
#end
#set ($fieldType = $field.type.fullyQualifiedName)
#set ($fieldName = $field.name)
#if ($field.type.mapType)
    /**
     * Resets the given <code>$fieldName</code>.
     */
    public void ${field.resetName}()
    {
        this.${fieldName}.clear();
    }
#elseif ($field.strutsAction.tableAction)
    /**
     * Resets the given <code>${fieldName}RowSelection</code>.
     */
    public void ${field.resetName}()
    {
        this.${fieldName}RowSelection = null;
    }
#else
    /**
     * Resets the given <code>$fieldName</code>.
     */
    public void ${field.resetName}()
    {
		this.$fieldName = $field.nullValue;
#if($field.radioButton)
#if($field.findTaggedValue("$radioSelected"))
#if($field.type.isStringType())
    	${field.setterName}(${field.name}Default);
#else
		${field.setterName}(${field.name}Default);
#end
#end
#end
    }

#end
#if ($field.type.collectionType)
    public void ${field.setterName}($fieldType $fieldName)
    {
        this.$fieldName = $fieldName;
    }

    /**
$field.getDocumentation("     * ")
     */
    public $fieldType ${field.getterName}()
    {
        return this.${fieldName};
    }

    public void ${field.setterName}AsArray(Object[] $fieldName)
    {
        this.$fieldName = ($fieldName == null) ? null : java.util.Arrays.asList($fieldName);
    }

    /**
     * Returns this collection as an array, if the collection itself would be <code>null</code> this method
     * will also return <code>null</code>.
     *
     * @see ${action.formBeanType}${hash}${field.getterName}
     */
    public java.lang.Object[] ${field.getterName}AsArray()
    {
        return ($fieldName == null) ? null : ${fieldName}.toArray();
    }
    
#elseif ($field.strutsAction.tableAction)
#set ($fieldName = $field.name)
#if ($field.type.primitive)
#set ($fieldType = "$field.type.wrapperName")
#else
#set ($fieldType = "$field.type.fullyQualifiedName")
#end
#set ($accessSuffix = "RowSelection")
    public void ${field.setterName}${accessSuffix}(java.util.List $fieldName${accessSuffix})
    {
        this.$fieldName${accessSuffix} = $fieldName${accessSuffix};
    }

    public java.util.List ${field.getterName}${accessSuffix}()
    {
        return this.$fieldName${accessSuffix};
    }

    public void ${field.setterName}${accessSuffix}AsArray(${fieldType}[] $fieldName${accessSuffix})
    {
        this.$fieldName${accessSuffix} = ($fieldName${accessSuffix} == null) ? null : java.util.Arrays.asList($fieldName${accessSuffix});
    }

    public ${fieldType}[] ${field.getterName}${accessSuffix}AsArray()
    {
        return ($fieldName${accessSuffix} == null) ? null : (${fieldType}[])${fieldName}${accessSuffix}.toArray(new ${fieldType}[${fieldName}${accessSuffix}.size()]);
    }
#elseif($field.widgetType=="money")
#set ($asType = "Double")
	public void ${field.setterName}As${asType}(java.lang.Double $fieldName){
		String s = null;
		try{
			if($fieldName != null){
				String myFormat = "#,#" + "#" +"#.00";
				java.text.DecimalFormat myFormatter = new java.text.DecimalFormat(myFormat, simbolosDecimais);
				s = myFormatter.format($fieldName);

				if(s.startsWith(",")){
					s = "0"+s;
				}

				this.$fieldName = s;
			}
		} catch(Exception e) {
			throw new RuntimeException(e);
		}
	}

    public java.lang.Double ${field.getterName}As${asType}(){
    	if(this.$fieldName != null && !this.${fieldName}.equals("")){
    		java.lang.String $fieldName = this.$fieldName;
			$fieldName = ${fieldName}.replace(".", "");
			$fieldName = ${fieldName}.replace(",", ".");
			return new java.lang.Double($fieldName);
		}
		return null;
	}

    public void ${field.setterName}(java.lang.String ${fieldName}){
	    this.$fieldName = $fieldName;
    }

    public java.lang.String ${field.getterName}(){
    	return this.$fieldName;
    }

#elseif ($field.date || $field.time)
#if ($field.date)
#set ($asType = "Date")
#else
#set ($asType = "Time")
#end
    public void ${field.setterName}As${asType}($fieldType $fieldName)
    {
        this.$fieldName = $fieldName;
    }

    /**
     * Returns the Date instance representing the <code>$field.name</code> field.
     *
     * @see ${action.formBeanType}${hash}${field.getterName}
#if ($field.date)
     * @see ${action.formBeanType}${hash}${dateFormatter}
#else
     * @see ${action.formBeanType}${hash}${timeFormatter}
#end
     */
    public $fieldType ${field.getterName}As${asType}()
    {
        return this.$fieldName;
    }

    public void ${field.setterName}(java.lang.String ${fieldName})
    {
        if (${fieldName} == null || ${fieldName}.trim().length() == 0)
        {
            this.$fieldName = null;
        }
        else
        {
            try
            {
#if ($fieldType == "java.util.Date")
#if ($field.date)
                this.$fieldName = ${dateFormatter}.parse(${fieldName});
#else
                this.$fieldName = ${timeFormatter}.parse(${fieldName});
#end
#else
## this is an attempt to support descendants of java.util.Date, the class needs <init>(long)
#if ($field.date)
                this.$fieldName = new ${fieldType}(${dateFormatter}.parse(${fieldName}).getTime());
#else
                this.$fieldName = new ${fieldType}(${timeFormatter}.parse(${fieldName}).getTime());
#end

#end
            }
            catch(java.text.ParseException e)
            {
                // we are not throwing an exception, let the validator handle these cases
                this.$fieldName = null;
            }
        }
    }

    /**
$field.getDocumentation("     * ")
     *
     * This method returns a <code>java.lang.String</code> instance, in order to get the
     * <code>java.util.Date</code> instance see the <code>${field.getterName}As${asType}()</code>
     * method.
     * <p>
     * The conversion from Date to String (and vice-versa) is done by means of a date formatter, which
     * can be accessed here: <code>${field.getterName}${asType}Formatter()</code>.
     *
     * @see ${action.formBeanType}${hash}${field.getterName}As${asType}
     * @see ${action.formBeanType}${hash}${field.getterName}${asType}Formatter
     */
    public java.lang.String ${field.getterName}()
    {
#if ($field.date)
        return (${fieldName} == null) ? null : ${dateFormatter}.format($fieldName);
#else
        return (${fieldName} == null) ? null : ${timeFormatter}.format($fieldName);
#end
    }

    /**
     * Returns the date formatter used for the <code>$field.name</code> property.
     *
     * @see ${action.formBeanType}${hash}${field.getterName}
     * @see ${action.formBeanType}${hash}${field.getterName}As${asType}
     */
    public static java.text.DateFormat ${field.getterName}${asType}Formatter()
    {
#if ($field.date)
        return ${formBeanClassName}.${dateFormatter};
#else
        return ${formBeanClassName}.${timeFormatter};
#end
    }

#elseif ($field.file)
    public void ${field.setterName}(java.io.File $fieldName)
    {
        this.$fieldName = $fieldName;
    }

    /**
	$field.getDocumentation("     * ")
     */
    public java.io.File ${field.getterName}()
    {
        return this.$fieldName;
    }
	
	public void ${field.setterName}ContentType(java.lang.String ${fieldName}ContentType)
    {
        this.${fieldName}ContentType = ${fieldName}ContentType;
    }

    /**
	$field.getDocumentation("     * ")
     */
    public java.lang.String ${field.getterName}ContentType()
    {
        return this.${fieldName}ContentType;
    }
	
	 public void ${field.setterName}FileName(java.lang.String ${fieldName}FileName)
    {
        this.${fieldName}FileName = ${fieldName}FileName;
    }

    /**
	$field.getDocumentation("     * ")
     */
    public java.lang.String ${field.getterName}FileName()
    {
        return this.${fieldName}FileName;
    }
#elseif ($field.type.mapType)
	public void ${field.setterName}Value(java.lang.String key, java.lang.Object value) 
	{
		this.${fieldName}.put(key, value);
	}

	public java.lang.Object ${field.getterName}Value(String key) 
	{
		return ${fieldName}.get(key);
	}
	
    public void ${field.setterName}(java.util.Map $fieldName)
    {
        this.$fieldName = $fieldName;
    }

    /**
$field.getDocumentation("     * ")
     */
    public java.util.Map ${field.getterName}()
    {
        return this.$fieldName;
    }

#elseif($field.type.enumeration)
#set($enumeration = $field.type)
#set($type = ${enumeration.fullyQualifiedName})
#if ($enumeration.literalType.primitive)
#set($literalType = ${enumeration.literalType.wrapperName})
#else
#set($literalType = ${enumeration.literalType.fullyQualifiedName})
#end

    public $literalType#if($field.widgetType == "multibox")[]#end ${field.getterName}()
    {
#if($field.widgetType == "plaintext")
    	return this.${fieldName}.getInternationalizationKey();
#elseif($field.widgetType == "multibox")
		${literalType}[] result = new ${literalType}[this.${fieldName}.length];
	
		for (int i = 0; i < this.${fieldName}.length; i++) {
			result[i] = this.${fieldName}[i].getValue();
		}
		
		return result;
#else
		return this.${fieldName}.getValue();
#end
    }
    
    public $type#if($field.widgetType == "multibox")[]#end ${field.getterName}AsEnumeration()
    {
    	return this.${fieldName};
    }
    
    public void ${field.setterName}($literalType#if($field.widgetType == "multibox")[]#end value)
    {
#if($field.widgetType == "multibox")
		if (value != null) {
			this.${fieldName} = new ${type}[value.length];
	
    		for (int i = 0; i < value.length; i++) {
    			this.${fieldName}[i] =  ${type}.${enumeration.fromOperationName}(value[i]);
    		}
		}
#else
		if (value != null)
			this.${fieldName} =  ${type}.${enumeration.fromOperationName}(value);
#end
    }
	
	public void ${field.setterName}($type#if($field.widgetType == "multibox")[]#end value)
    {
		if (value != null) {
			this.${fieldName} = value;
		}
    }

#else

#if ($field.doubleSelect)
	public void ${field.setterName}($fieldType $fieldName)
    {
        this.$fieldName = $fieldName;
    }

    public java.util.Map ${field.getterName}Map()
    {
    	return ${fieldName}Map;
    }

    public void ${field.setterName}Map(java.util.Map ${fieldName}Map, java.lang.String value, java.lang.String label, java.lang.String value2, java.lang.String label2)
    {
    	java.util.Map temp = new java.util.LinkedHashMap();

    	int i = 0 ,j = 0;

    	try{
    		for (java.util.Iterator iterator = ${fieldName}Map.keySet().iterator(); iterator.hasNext(); i++)
    		{
    			final java.lang.Object item = iterator.next();

    			java.util.ArrayList doubleList = new java.util.ArrayList();

    			LabelValue key = new LabelValue(org.apache.commons.beanutils.PropertyUtils.getProperty(item, label),
    					org.apache.commons.beanutils.PropertyUtils.getProperty(item, value));

    			for (java.util.Iterator iterator2 = ((java.util.Collection)${fieldName}Map.get(item)).iterator(); iterator2.hasNext(); j++)
    			{
    				final java.lang.Object item2 = iterator2.next();

    				doubleList.add(new LabelValue(org.apache.commons.beanutils.PropertyUtils.getProperty(item2, label2),
    						org.apache.commons.beanutils.PropertyUtils.getProperty(item2, value2)));
    			}
    			temp.put(key, doubleList);
    		}
    	}
    	catch (Exception ex)
        {
    		throw new java.lang.RuntimeException("${formBeanClassName}.set${fieldName}Map encountered an exception", ex);
        }
    
    	this.${fieldName}Map = temp;
    }

#else
    public void ${field.setterName}($fieldType $fieldName)
    {
        this.$fieldName = $fieldName;
    }
#end

    /**
$field.getDocumentation("     * ")
     */
    public $fieldType ${field.getterName}()
    {
        return this.$fieldName;
    }
    
#if ($field.widgetType == "radio")
    /**
     * Converts the selected option index to the corresponding value as it was modeled.
     */
    public $field.type.fullyQualifiedName ${field.getterName}OptionValue(int optionIndex)
    {
#if ($field.type.primitive)
        return ($field.type.fullyQualifiedName)optionIndex;
#else
        switch(optionIndex)
        {
#set ($optionValues = $field.optionValues)
#foreach ($optionKey in $field.optionKeys)
#set ($optionIndex = $velocityCount - 1)
#if ($field.type.fullyQualifiedName == "java.lang.String")
            case $optionIndex : return "$optionValues.get($optionIndex)";
#else
            case $optionIndex : return new ${field.type.fullyQualifiedName}("$optionValues.get($optionIndex)");
#end
#end
            default:
                throw new java.lang.ArrayIndexOutOfBoundsException(
                    "Cannot access option "+optionIndex+", please specify a value in the range [0-$optionIndex]");
        }
#end
    }

#end
#end

###if ($field.doubleSelect || ${field.widgetType}=="multibox")
###set($labels = true)
###processLists2 ($field)
##end

#end
    /**
     * @see org.apache.struts.validator.ValidatorForm${hash}reset(org.apache.struts.action.ActionMapping,javax.servlet.http.HttpServletRequest)
     */
    public void reset(org.apache.struts.action.ActionMapping mapping, javax.servlet.http.HttpServletRequest request)
    {
#foreach ($field in $fields)
#if ($field.resetRequired)
## here we actually set the field to its null value, not its reset value (reset value is for dummy impls)
        this.$field.name = $field.nullValue;
#if ($field.doubleSelect)
        this.${field.name}__Double = null;
#end
#if ($field.selectable && $field.multiple && !($field.type.collectionType))
## multi-select fields need to be reset to an empty array (http://struts.apache.org/userGuide/struts-html.html#select)
##        this.$field.valueListName = new java.lang.Object[0];
##        this.$field.labelListName = new java.lang.Object[0];
##        this.${field.labelListName}Hints = new java.lang.Object[0];        
#end
#end
#if ($field.strutsAction.tableAction)
        this.${field.name}RowSelection = null;
#end
#end
    }

	/**
     * @see org.apache.struts.validator.ValidatorForm${hash}resetCheckBoxes(org.apache.struts.action.ActionMapping,javax.servlet.http.HttpServletRequest)
     */
    public void resetCheckBoxes(org.apache.struts.action.ActionMapping mapping, javax.servlet.http.HttpServletRequest request)
    {
#foreach ($field in $fields)
#if ($stringUtils.equals($field.widgetType,"checkbox"))
        this.$field.name = $field.nullValue;
#end
#end
    }

    public java.lang.String toString()
    {
        org.apache.commons.lang.builder.ToStringBuilder builder =
            new org.apache.commons.lang.builder.ToStringBuilder(this);
#foreach ($field in $fields)
#if ($field.password)
        builder.append("$field.name", "***");
#else
#if ($field.strutsAction.tableAction)
        builder.append("${field.name}RowSelection", this.${field.name}RowSelection);
#else
        builder.append("$field.name", this.$field.name);
#end
#end
#end
        return builder.toString();
    }

    /**
     * Allows you to clean all values from this form. Objects will be set to <code>null</code>, numeric values will be
     * set to zero and boolean values will be set to <code>false</code>. Backinglists for selectable fields will
     * also be set to <code>null</code>.
     */
    public void clean()
    {
#foreach ($field in $fields)
#if ($field.strutsAction.tableAction)
        this.${field.name}RowSelection = null;
#else
        this.$field.name = $field.nullValue;
#if ($field.doubleSelect)
        this.${field.name}__Double = null;
#end
##if ($field.select || $field.enumeration || $field.radio)
##        this.$field.valueListName = null;
##        this.$field.labelListName = null;    
##        this.${field.labelListName}Hints = null;
###end
#end
#end
    }

    /**
     * Override to provide population of current form with request parameters when validation fails.
     *
     * @see org.apache.struts.action.ActionForm${hash}validate(org.apache.struts.action.ActionMapping, javax.servlet.http.HttpServletRequest)
     */
    public org.apache.struts.action.ActionErrors validate(org.apache.struts.action.ActionMapping mapping, javax.servlet.http.HttpServletRequest request)
    {
        final org.apache.struts.action.ActionErrors errors = super.validate(mapping, request);
        if (errors != null && !errors.isEmpty())
        {
#populateCurrentFormOnError("			")
        }
        return errors;
    }

###if($labels)
##processListsClasses()
##end
 
    /** Verifica se o campo esta sendo exibido na tela */
    public boolean isFieldVisibleInOperationMode(String field, java.util.Collection modosOperacao) {
	String modoPermitido = null;
	java.util.StringTokenizer tokenizerModosPermitidos = null;
        java.util.StringTokenizer tokenizerModosPossuidos = null;
#foreach ($field in $fields)
#set($valueFieldOperationMode = $field.findTaggedValue("$fieldOperationMode"))
#if($valueFieldOperationMode != "")
        if (field.equals("$field.name")) {
            if (modosOperacao == null || modosOperacao.isEmpty()) return false;
            tokenizerModosPermitidos = new java.util.StringTokenizer("$valueFieldOperationMode", ",");
            while (tokenizerModosPermitidos.hasMoreTokens()) {
                modoPermitido = tokenizerModosPermitidos.nextToken();
                if(modosOperacao.contains(modoPermitido)) return true;
            }
            return false;
        }
#end		    
#end

        return true;
    }
    
    public String getOperationModeKey(){
        return "${action.useCase.package.webModuleName}${action.useCase.actionPath}.do";
    }
	
#if ($hasTable)	
	public String getActionPath(){
		return "${action.actionPath}.action";
    }

#end
}
#end
