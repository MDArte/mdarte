#set ($className = "HibernateJSONBHelper")
#set ($generatedFile = "$stringUtils.replace($userTypesPackage, '.', '/')/${className}.java")
package $userTypesPackage;

import java.io.StringReader;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.json.Json;
import javax.json.stream.JsonParser;
import javax.json.stream.JsonParser.Event;

import br.mdarte.exemplo.academico.util.Util;

public class $className {
	
	public static boolean isObject(Event event){
		if(event != null)
				return event == Event.START_OBJECT;
		
		return false;
	}
	
	public static boolean isObject(String json){
		if(!Util.checkEmpty(json)) {
			Event event  = Json.createParser(new StringReader(json)).next();
		
			return event == Event.START_OBJECT;
		}
		
		return false;
	}
	
	public static boolean isArray(Event event){
		if(event != null) {
			return event == Event.START_ARRAY;
		}
		
		return false;
	}
	
	public static boolean isArray(String json){
		
		if(!Util.checkEmpty(json)) {
			Event event  = Json.createParser(new StringReader(json)).next();
		
			return event == Event.START_ARRAY;
		}
		
		return false;
	}
	
	public static boolean isValue(Event event) {
		if(event != null)
			return !(event == Event.START_ARRAY) && 
					!(event == Event.START_OBJECT) &&
					!(event == Event.END_ARRAY) &&
					!(event == Event.END_OBJECT) &&
					!(event == Event.KEY_NAME);
		
		return false;
	}
	
	public static Map<String, String> parseJSONObjectToMap(String json) {
		Map<String,String> map = new HashMap<String,String>();
		
		JsonParser parser = Json.createParser(new StringReader(json));

		if(isObject(parser.next())) {
			
			while(parser.hasNext()){
				Event firstEvent = parser.next();
				
				if(firstEvent == Event.KEY_NAME) {
					String key = parser.getString();
					
					Event secondEvent = parser.next();
					
					if(isValue(secondEvent)) {
						String value = new String();
						
						if((secondEvent == Event.VALUE_STRING) || (secondEvent == Event.VALUE_NUMBER)) {
							value = parser.getString();
						} else if(secondEvent == Event.VALUE_TRUE) {
							value = "true";
						} else if(secondEvent == Event.VALUE_FALSE) {
							value = "false";
						} else
							value = null;
						
						map.put(key, value);
					}
				}
			}	
		} else {
			return null;
		}
		
		return map;
	}
	
	public static Map<String, String> parseJSONObjectToMap(JsonParser parser) {
		Map<String,String> map = new HashMap<String,String>();

		if(isObject(parser.next())) {
			
			while(parser.hasNext()){
				Event firstEvent = parser.next();
				
				if(firstEvent == Event.KEY_NAME) {
					String key = parser.getString();
					
					Event secondEvent = parser.next();
					
					if(isValue(secondEvent)) {
						String value = new String();
						
						if((secondEvent == Event.VALUE_STRING) || (secondEvent == Event.VALUE_NUMBER)) {
							value = parser.getString();
						} else if(secondEvent == Event.VALUE_TRUE) {
							value = "true";
						} else if(secondEvent == Event.VALUE_FALSE) {
							value = "false";
						} else
							value = null;
						
						map.put(key, value);
					}
				} else if(firstEvent == Event.END_OBJECT){
					break;
				}
			}	
		} else {
			return null;
		}
		
		return map;
	}
	
	public static String parseArrayListToJSONArray(ArrayList list) {
		int size = list.size(), i = 0;
		StringBuffer buffer = new StringBuffer("[ ");
		
		for(Object obj : list) {
			Subentity sub = (Subentity)obj;
			
			buffer.append(sub.toJson());
			
			if(i < size - 1) {
				buffer.append(", ");
			}
			
			i++;
		}
		buffer.append(" ]");
		
		return buffer.toString();
	}
	
	public static ArrayList<Map<String,String>> parseJSONArrayToArrayList(String json) {
		ArrayList<Map<String,String>> list = new ArrayList<Map<String,String>>();
		
		JsonParser parser = Json.createParser(new StringReader(json));
		
		if(!isArray(parser.next())){
			return null;
		} else {
			while(parser.hasNext()) {
				Map<String,String> object = parseJSONObjectToMap(parser);
				
				if(object != null) {
					list.add(object);
				}
			}
		}
		
		return list;
	}
	
	public static Object parse (String json) {
		
		if(isObject(json)) {
			return parseJSONObjectToMap(json);
		} else if(isArray(json)) {
			return parseJSONArrayToArrayList(json);
		}
		
		return null;
	}
}