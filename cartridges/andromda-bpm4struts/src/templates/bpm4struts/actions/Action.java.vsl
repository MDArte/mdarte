#parse("templates/bpm4struts/actions/Action.java.vm")
#set ($generatedFile = "${action.fullActionPath}.java")
##
##  CONSTANTS
##
#set ($controllerClass = $action.controller)
#set ($formBeanClassName = $action.formBeanClassName)
#set ($roles = $action.actionRoles)
#set ($resettableActionParameters = $action.resettableActionParameters)
#set ($actionForwards = $action.actionForwards)
#set ($actionExceptions = $action.actionExceptions)
#set ($actionStates = $action.actionStates)
#set ($decisionTransitions = $action.decisionTransitions)
#set ($security = $stringUtils.isNotBlank($securityRealm) && $stringUtils.isNotBlank($roles) )
##
##  MACROS
##
#macro (saveMessages $transition $indent)
#if (!$controllerClass.operations.isEmpty())
#if ($transition.successMessagesPresent)
#foreach ($message in $transition.successMessages.entrySet())
${indent}${controllerClass.fullyQualifiedName}Factory.get${controllerClass.name}Instance().saveSuccessMessage(request, "$message.key");
#end
#end
#if ($transition.warningMessagesPresent)
#foreach ($message in $transition.warningMessages.entrySet())
${indent}${controllerClass.fullyQualifiedName}Factory.get${controllerClass.name}Instance().saveWarningMessage(request, "$message.key");
#end
#end
#end
#end
##
## CHECK IF THE ACTION IS A STRUTS 2 ACTION
##
#set($gerar = false)
#if($action.actionOldStruts)
#set($gerar = true)
#end
##
##  START TEMPLATE
##
#if($gerar)
// license-header java merge-point
/**
 * Attention: Generated code! Do not modify by hand!
 * Generated by: bpm4struts/actions/Action.java.vsl in andromda-bpm4struts-cartridge-coppetec.
 */
package $action.packageName;

/**
$action.getDocumentation(" * ")
 */
 
import java.util.ArrayList;
import java.util.Iterator;
import java.util.HashMap;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.struts.upload.MultipartRequestWrapper;
#set ($package = "${stringUtils.replace($utilDir,'/','.')}")
import ${customTypesPackage}.${package}.Constantes;

#set ($securityEnabled = $stringUtils.isNotBlank($securityRealm))
#if ($securityEnabled && !${action.useCase.openAccess}) 
public final class $action.actionClassName extends ${controleAcessoDir}.Login
{
	public org.apache.struts.action.ActionForward particularExecute(org.apache.struts.action.ActionMapping mapping, org.apache.struts.action.ActionForm form, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception
#else
public final class $action.actionClassName extends org.apache.struts.action.Action
{
	protected String __casoDeUso = "${action.useCase.name}";
	protected String __urlCasoDeUso = "${action.actionPath}";
	protected String __modulo = "${action.useCase.package.webModuleName}";
	protected String __contexto = "$stringUtils.replaceOnce(${action.useCase.package.contexto}, ${contextoPrincipal}, "")";

	public org.apache.struts.action.ActionForward execute(org.apache.struts.action.ActionMapping mapping, org.apache.struts.action.ActionForm form, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception
#end
	{
#processBreadCrumb($modulo $externalHyperlinkModulo $externalHyperlink $breadCrumbLabel $breadCrumbInput $action "		")

#if($action.exitingPage)
#set($useCaseName = $action.useCase.name)
#set($jspName = $action.input.name)
    	Boolean aplicacaoPermiteUsoBackBrowser = (Boolean) request.getSession().getServletContext().getAttribute("aplicacaoPermiteUsoBackBrowser");
    	if (!aplicacaoPermiteUsoBackBrowser ^#if(${action.togglePageControl}) true#else false#end)
    	{
    		if (getInvalidatePageControlCounter(request).get("${useCaseName}.${jspName}") != null && request.getParameter("invalidatePageControlCounter") != null && !(((Integer)getInvalidatePageControlCounter(request).get("${useCaseName}.${jspName}")).equals(Integer.valueOf(request.getParameter("invalidatePageControlCounter")))))
    		{
    			javax.servlet.http.HttpSession session = request.getSession();
    			org.apache.struts.action.ActionMessages messages = (org.apache.struts.action.ActionMessages)session.getAttribute(org.apache.struts.Globals.MESSAGE_KEY);
    			if (messages == null) {
    				messages = new org.apache.struts.action.ActionMessages();
    				session.setAttribute(org.apache.struts.Globals.MESSAGE_KEY, messages);
    			}
    			messages.add("$errorMessagesKey", new org.apache.struts.action.ActionMessage("pagina.expirou"));
    			return mapping.findForward("forwardAction");
    		}
    	}
#end

    	org.apache.struts.action.ActionForward forward = null;
    	boolean copyParameters = true;

		if (request.getSession().getAttribute(Constantes.COPY_PARAMETERS) != null) {
			copyParameters = (Boolean) request.getSession().getAttribute(Constantes.COPY_PARAMETERS);
			request.getSession().removeAttribute(Constantes.COPY_PARAMETERS);
		}

#if (!${action.copyParameters})
		request.getSession().setAttribute(Constantes.COPY_PARAMETERS, Boolean.FALSE);

#end
#if ($action.useCaseStart)

## [MOISES-COPPETEC]
##Codigo para retirar os sessionobjects da sessao que nao pertencem mais ao escopo, isto a Session Object que
##esta na sessao e nao pertence o caso de uso anterior. Para isto utiliza-se uma lista de cadastro. 
#processRemovePageSO("		")

		java.util.List listaCasosUso = new java.util.ArrayList();

#foreach ($finalState in $action.useCase.referencingFinalStates)
#if ($finalState.actions.size() > 0)
#set($finalStateAction = $finalState.actions.get(0))
		listaCasosUso.add("$finalStateAction.useCase.name");
#end
#end
	
		${servletPackage}.SessionObjectUtil.updateSessionObjects(request, listaCasosUso);
	
#end

##Fim

#if (!$action.actionFormFields.empty)
		final $formBeanClassName specificForm = ($formBeanClassName)form;

#if ($action.useCaseStart)
## for each final state targetting this use-case we check the incoming variables that ought to
## survive the trip to this use-case, those parameters will have been put into session scope
## and here we move them into the new form
#if ($action.formScopeRequest)
		final Object previousFormObject = request.getAttribute("$action.useCase.formKey");
#else
		final Object previousFormObject = request.getSession().getAttribute("$action.useCase.formKey");
#end

## [MOISES-COPPETEC] - Codigo adicionado para permitir que os atributos do form sejam obtidos da transicao inician e nao
## mais dos casos de uso que o referenciam

		if(copyParameters && previousFormObject != null) {
#processUseCaseStartCopy($action.actionFormFields "			")
		}

#else

#if($action.exitingPage && !$action.lookupGrid)
#set($useCaseName = $action.useCase.name)
#set($jspName = $action.input.name)
		if(getInvalidatePageControlCounter(request).get("${useCaseName}.${jspName}") == null) 
			getInvalidatePageControlCounter(request).put("${useCaseName}.${jspName}", 0);
		getInvalidatePageControlCounter(request).put("${useCaseName}.${jspName}", ((Integer)getInvalidatePageControlCounter(request).get("${useCaseName}.${jspName}")).intValue() + 1);
#end
#end

#if ($action.formScopeRequest)
		request.setAttribute("$action.useCase.formKey", form);
#else
		request.getSession().setAttribute("$action.useCase.formKey", form);
#end

		try
		{
## [MOISES-COPPETEC]
## Codigo responsavel por pegar o parametro da DisplayTag e colocar o nome da acao na sessao, caso esta acao 
## carregue dados para uma tabela e assim possibilitar a paginacao.
#set($possuiTable = false)
#foreach($field in $action.actionFormFields)
#if($field.table && !$possuiTable)
#set($possuiTable = true)

			if (request instanceof MultipartRequestWrapper) {
				MultipartRequestWrapper wrapper = (MultipartRequestWrapper) request;
				HttpServletRequest r = wrapper.getRequest();
				r.setAttribute("displaytag", request.getParameterMap());
			}
			else {
				request.setAttribute("displaytag", null); 
			}
			request.getSession().setAttribute(Constantes.ACAO_ATUAL, "${action.actionPath}.do");
			if(request.getParameter(Constantes.PARAMETRO_PAGINA) == null){
				request.setAttribute(Constantes.PARAMETRO_PAGINA, 1);
				request.setAttribute(Constantes.ATTRIBUTE_TABLE, request.getParameter(Constantes.PARAMETRO_TABLE));
			} else {
##if ($action.formScopeRequest)
##form = (org.apache.struts.action.ActionForm)request.getAttribute("$action.useCase.formKey");
##else
				request.setAttribute(Constantes.PARAMETRO_PAGINA, Integer.valueOf(request.getParameter(Constantes.PARAMETRO_PAGINA)));
##end
				request.setAttribute(Constantes.ATTRIBUTE_TABLE, request.getParameter(Constantes.PARAMETRO_TABLE));
			}
#end
#end
##Fim
#if($transition.target.findTaggedValue("$externalHyperlinkModulo"))
#set($finalUseCaseName = "$transition.target.findTaggedValue($externalHyperlinkModulo)$transition.target.findTaggedValue($externalHyperlink)")
#else
#set($finalUseCaseName = "${transition.target.targetUseCase.package.webModuleName}$transition.target.fullPath")
#end

## #processOperationMode($action ${action.useCase.name})
#processOperationMode($action "${action.useCase.package.webModuleName}${action.useCase.actionPath}.do" "			")
#processTableNameList($action "			")
#processTransition($action "			")
		} catch (java.lang.Exception exception) {
#populateCurrentFormOnError("			")
			throw exception;
		}

#if($possuiTable)
		request.getSession().setAttribute("$action.useCase.formKey", form);	
#end

#saveMessages($action "        ")
#if (!$resettableActionParameters.empty)

#foreach ($field in $resettableActionParameters)
		specificForm.${field.resetName}();
#end
#end

#else
	
###processOperationMode($action ${action.useCase.name})
#processOperationMode($action "${action.useCase.package.webModuleName}${action.useCase.actionPath}.do" "		")
#processTableNameList($action "		")
#processTransition($action "		")

#if ($action.formScopeRequest)
		request.setAttribute("$action.useCase.formKey", null);
#else
		request.getSession().setAttribute("$action.useCase.formKey", null);
#end
#end
#processPageSO($action)
#processRedirect($action)
		request.removeAttribute("$forwardKey");
		request.removeAttribute("$forwardKeyModule");
		return forward;

	}

#foreach ($actionState in $actionStates)
	/**
$actionState.getDocumentation("     * ")
	*/
	private org.apache.struts.action.ActionForward ${actionState.actionMethodName}(org.apache.struts.action.ActionMapping mapping, org.apache.struts.action.ActionForm form, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception
	{

#set($parameterReport = "")
#set ($reportName = "")
#foreach ($parameter in $actionState.forward.trigger.parameters)
#if($parameter.report)
#set($parameterReport = $parameter)
#set($reportName = $parameterReport.reportName)
#end
#end
#set ($controllerCalls = $actionState.controllerCalls)
		org.apache.struts.action.ActionForward forward = null;
#if ($controllerCalls.empty)
#saveMessages($actionState.forward "        ")
###processOperationMode($actionState.forward ${action.useCase.name})
#processOperationMode($actionState.forward "${action.useCase.package.webModuleName}${action.useCase.actionPath}.do" "		")
#processTableNameList($actionState.forward "		")
#processTransition($actionState.forward "		")
#else

#if (!$controllerClass.operations.isEmpty())
#foreach ($controllerCall in $controllerCalls)
#if (!$action.actionFormFields.empty)
		${controllerClass.fullyQualifiedName}Factory.get${controllerClass.name}Instance().${controllerCall.name}(mapping, ($formBeanClassName)form, request, response);
#else
		// we pass an empty form implementation to the controller, we know there are no parameters on this operation because the
		// cartridge would have issued a model validation error
		${controllerClass.fullyQualifiedName}Factory.get${controllerClass.name}Instance().${controllerCall.name}(mapping, new ${controllerCall.interfaceName}(){}, request, response);
#end
#end
#end
##processOperationMode($actionState.forward ${action.useCase.name})
#processOperationMode($actionState.forward "${action.useCase.package.webModuleName}${action.useCase.actionPath}.do" "		")	
#processTableNameList($actionState.forward "		")
#processTransition($actionState.forward "		")

#saveMessages($actionState.forward "        ")

#end
#if(!$reportName.equals(""))
		try
		{
			String fs = System.getProperty("file.separator");
			java.io.File tempFile = java.io.File.createTempFile("${parameterReport.reportName}", "${parameterReport.reportType}");
			tempFile.deleteOnExit();
			$stringUtils.capitalize(${parameterReport.name})DataSourceImpl ds = new $stringUtils.capitalize(${parameterReport.name})DataSourceImpl((($formBeanClassName)form).${parameterReport.getterName}());
			java.util.Map parameters = ds.getParameters();  
			net.sf.jasperreports.engine.JasperPrint jasperPrint = net.sf.jasperreports.engine.JasperFillManager.fillReport(this.getClass().getClassLoader().getResourceAsStream("/${controllerClass.packagePath}/${parameterReport.reportName}.jasper"), parameters, ds);

#if($parameterReport.reportType.equals("pdf"))
			net.sf.jasperreports.engine.JasperExportManager.exportReportToPdfFile(jasperPrint, tempFile.getPath());
#elseif($parameterReport.reportType.equals("xls"))
			net.sf.jasperreports.engine.export.JRXlsExporter xlsExporter = new net.sf.jasperreports.engine.export.JRXlsExporter();
			xlsExporter.setParameter(net.sf.jasperreports.engine.JRExporterParameter.OUTPUT_FILE, tempFile );
			xlsExporter.setParameter(net.sf.jasperreports.engine.JRExporterParameter.JASPER_PRINT, jasperPrint);
			xlsExporter.setParameter(net.sf.jasperreports.engine.JRExporterParameter.CHARACTER_ENCODING, "ISO-8859-9");
			xlsExporter.exportReport();
#end

			response.setContentType("application/${parameterReport.reportType}");
			response.setHeader("Content-Disposition","attachment;filename=${parameterReport.reportName}.${parameterReport.reportType}");

			byte[] dados = new byte[1024];
			java.io.InputStream in = new java.io.FileInputStream (tempFile);
			int length = in.read(dados);
			while(length >= 0) {
				response.getOutputStream().write(dados);
				length = in.read(dados); 
			}

#processTransition($actionState.forward "		")
		} catch (Exception e) {
			throw e;
		}
#end
		return forward;
	}

#end

#foreach ($decisionTransition in $decisionTransitions)
#set ($controllerMethodName = $decisionTransition.operationCall.name)
#set ($decisionMethodName = "__$controllerMethodName")
	/**
$decisionTransition.getDocumentation("     * ")
	*/
	private org.apache.struts.action.ActionForward ${decisionMethodName}(org.apache.struts.action.ActionMapping mapping, org.apache.struts.action.ActionForm form, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception
	{
		org.apache.struts.action.ActionForward forward = null;
#if (!$controllerClass.operations.isEmpty())
#if (!$action.actionFormFields.empty)
		final java.lang.String value = java.lang.String.valueOf(${controllerClass.fullyQualifiedName}Factory.get${controllerClass.name}Instance().${controllerMethodName}(mapping, ($formBeanClassName)form, request, response));
#else
		// we pass an empty form implementation to the controller, we know there are no parameters on this operation because the
		// cartridge would have issued a model validation error
		final java.lang.String value = java.lang.String.valueOf(${controllerClass.fullyQualifiedName}Factory.get${controllerClass.name}Instance().${controllerMethodName}(mapping, new ${decisionTransition.operationCall.interfaceName}(){}, request, response));
#end
#end

#set ($defaultOutcome = false)## keeps track of the last transition
#foreach ($outcome in $decisionTransition.target.outgoing)
#set ($defaultOutcome = $outcome)
		if (value.equals("$outcome.guardName"))
		{
#saveMessages($outcome "            ")
###processOperationMode($outcome ${action.useCase.name})
#processOperationMode($outcome  "${action.useCase.package.webModuleName}${action.useCase.actionPath}.do" "			")
#processTableNameList($outcome "			")
#processTransition($outcome "			")
			return forward;
		}
#end

		// we take the last action in case we have an invalid return value from the controller
## #processOperationMode($defaultOutcome)
#processOperationMode($defaultOutcome "${action.useCase.package.webModuleName}${action.useCase.actionPath}.do" "		")
#processTableNameList($defaultOutcome "		")
#processTransition($defaultOutcome "		")
		return forward;
	}

#end

	private java.util.Map getInvalidatePageControlCounter(javax.servlet.http.HttpServletRequest request)
	{
		java.util.Map invalidatePageControlCounter = (java.util.Map)request.getSession().getAttribute("invalidatePageControlCounter");

		if(invalidatePageControlCounter == null)
		{
			invalidatePageControlCounter = new java.util.HashMap();
			request.getSession().setAttribute("invalidatePageControlCounter", invalidatePageControlCounter);
		}

		return invalidatePageControlCounter;
	}

	public void loadUseCaseInfo()
	{
		__casoDeUso = "${action.useCase.name}";
		__urlCasoDeUso = "${action.actionPath}.do";
		__modulo = "${action.useCase.package.webModuleName}";
		__contexto = "$stringUtils.replaceOnce(${action.useCase.package.contexto}, ${contextoPrincipal}, "")";
	}
}
#end