#parse("templates/ejb/SessionEJBGlobals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SessionEJBLocator.vsl in andromda-ejb-cartridge.
//

#set ($generatedFile = "${serviceLocatorName}.java")
#if($stringUtils.isNotEmpty($customTypesPackage))
package $customTypesPackage;
#set ($generatedFile = "${stringUtils.replace($customTypesPackage,'.','/')}/${generatedFile}")
#end

/**
 * Locates and provides all available application services.
 */
public class $serviceLocatorName extends br.ufrj.coppetec.ServiceLocator
{
	private static ServiceLocator instance = null;
	private ServiceLocator()
	{
		// shouldn't be instantiated
	}

	/**
	 * Gets the shared instance of this Class
	 *
	 * @return the shared service locator instance.
	 */
	public static ServiceLocator instance()
	{
		if (instance == null)
		{
			instance = new ServiceLocator();
		}
		return instance;
	}

#foreach ($service in $services)
#if(!$service.findTaggedValue("@andromda.services.shared"))
##gera codigo para pegar o bean remoto
#set ($home = "${stringUtils.uncapitalize($service.name)}Home")
#set ($homeClassName = "${service.fullyQualifiedName}Home")
	/**
	 * Gets an instance of <code>$service.fullyQualifiedName</code>
	 */
	private final $service.fullyQualifiedName get${service.name}()
	{
		Object bi = null;

		try
		{
			Class narrowTo = null;

			try
			{
				narrowTo = Class.forName("${service.fullyQualifiedName}Home");
			}
			catch(Exception e1)
			{
				narrowTo = Class.forName("${service.fullyQualifiedName}");
			}

			try
			{
				// for EJB 2
				bi = getService(null, "${service.fullyQualifiedName}", narrowTo);
			}
			catch (Exception ex2)
			{
				// for EJB 3
				bi = lookupHome(null, "${service.fullyQualifiedName}", narrowTo);
			}

			return (${service.fullyQualifiedName}) bi;
		}
		catch (Exception ex)
		{
			throw new javax.ejb.EJBException(ex);
		}
	}
##fim gera codigo para pegar o bean remoto

##gera codigo para pegar o bean local
#set ($home = "${stringUtils.uncapitalize($service.name)}LocalHome")
#set ($homeClassName = "${service.fullyQualifiedName}LocalHome")
	/**
	 * Gets an instance of <code>${service.fullyQualifiedName}Local</code>
	 */
	private final ${service.fullyQualifiedName}Local get${service.name}Local()
	{
		Object bi = null;

		try
		{
			try
			{
				// for EJB 2
				bi = super.getServiceLocal("java:global/${projectId}/${projectId}-${projectVersion}/${service.package}.${name}!${service.fullyQualifiedName}");
			}
			catch (Exception ex1)
			{
				// for EJB 3
				bi = lookupLocalHome("java:global/${projectId}/${projectId}-${projectVersion}/${service.package}.${name}!${service.fullyQualifiedName}Local");
			}

			return (${service.fullyQualifiedName}Local) bi;
		}
		catch (Exception ex)
		{
			throw new javax.ejb.EJBException(ex);
		}
	}
##fim gera codigo para pegar o bean remoto

##gera codigo para pegar o bean BI
	/**
	 * Gets an instance of <code>${service.fullyQualifiedName}BI</code>
	 */
	public final ${service.fullyQualifiedName}BI get${service.name}BI()
	{
		${service.fullyQualifiedName}BI bi;
		try
		{
			//tenta pegar o bean localmente
			bi = get${service.name}Local();
		}
		catch (Exception ex1)
		{
			try
			{
				//tenta pegar o bean remotamente
				bi = get${service.name}();
			}
			catch(Exception ex2)
			{
				throw new javax.ejb.EJBException(ex2);
			}
		}

		return bi;
	}
##fim gera codigo para pegar o bean BI
#end
#end

	private final ${customTypesPackage}.UtilServiceHandler getUtilServiceHandler()
	{
		try
		{
			${customTypesPackage}.UtilServiceHandlerHome utilServiceHandlerHome = (${customTypesPackage}.UtilServiceHandlerHome)lookupHome(
				null,
				${customTypesPackage}.UtilServiceHandlerHome.JNDI_NAME,
				${customTypesPackage}.UtilServiceHandlerHome.class);

			return utilServiceHandlerHome.create();
		}
		catch (Exception ex)
		{
			throw new javax.ejb.EJBException(ex);
		}
	}

	private final ${customTypesPackage}.UtilServiceHandlerLocal getUtilServiceHandlerLocal()
	{
		try
		{
			${customTypesPackage}.UtilServiceHandlerLocalHome utilServiceHandlerLocalHome = (${customTypesPackage}.UtilServiceHandlerLocalHome)lookupLocalHome(${customTypesPackage}.UtilServiceHandlerLocalHome.JNDI_NAME);

			return utilServiceHandlerLocalHome.create();
		}
		catch (Exception ex)
		{
			throw new javax.ejb.EJBException(ex);
		}
	}

	public final ${customTypesPackage}.UtilServiceHandlerBI getUtilServiceHandlerBI()
	{
		${customTypesPackage}.UtilServiceHandlerBI bi;
		try
		{
			//tenta pegar o bean localmente
			bi = getUtilServiceHandlerLocal();
		}
		catch (Exception ex1)
		{
			try
			{
				//tenta pegar o bean remotamente
				bi = getUtilServiceHandler();
			}
			catch(Exception ex2)
			{
				throw new javax.ejb.EJBException(ex2);
			}
		}

		return bi;
	}
}
