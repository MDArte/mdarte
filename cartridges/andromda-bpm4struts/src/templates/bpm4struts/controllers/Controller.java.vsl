#set ($generatedFile = "${controller.fullPath}.java")
#set ($operations = $controller.operations)
##
##  CONSTANTS
##
#set ($sessionObjects = $controller.sessionObjects)
#set($gerar = false)
#if(${controller.useCase.useCaseOldStruts})
#set($gerar = true)
#end
##
##  START TEMPLATE
##
#if($gerar)
// license-header java merge-point
package $controller.packageName;
#set ($securityEnabled = $stringUtils.isNotBlank($securityRealm))

#set($packageUtil = "${customTypesPackage}.${stringUtils.replace($utilDir,'/','.')}")
import ${packageUtil}.Constantes;
import ${packageUtil}.PaginationStrategy;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import ${servletPackage}.ControllerAbstract;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import java.util.Collection;
##
#set ($sharp = "#")

/**
$controller.getDocumentation(" * ")
 */
public abstract class ${controller.name} extends ControllerAbstract
{
#set ($pseudostates = ${controller.useCase.activityGraph.pseudostates})
#set ($decisionCounter = 1)
#foreach ($pseudostate in $pseudostates)
#if (${pseudostate.decisionPoint})
#set ($decisionID = $decisionCounter)
#if (${stringUtils.isNotEmpty($pseudostate.name)})
#set ($decisionID = "$stringUtils.upperCase($pseudostate.name)")
#set ($decisionID = "$stringUtils.replaceChars($decisionID, ' .-!?#%&|*(){}<>+=', '__________________')")
#end
#foreach ($transition in $pseudostate.outgoing)
#set ($guard = ${transition.guard})
#if ($guard)
#set ($targetName = "$stringUtils.upperCase($guard.body)")
#set ($targetName = "$stringUtils.replaceChars($targetName, ' .-!?#%&|*(){}<>+=', '__________________')")
	public static final String DECISION_${decisionID}_${targetName} = "${guard.body}";
#end
#end
#set ($decisionCounter = $decisionCounter + 1)
#end

#end

#foreach ($operation in $operations)
#set ($parameters = $operation.arguments)
#set ($visibility = $operation.visibility)
#set ($returnType = $operation.returnType.fullyQualifiedName)
#if (!$returnType)
#set ($returnType = "void")
#end
	/**
$operation.getDocumentation("     * ")
#if ($operation.callingBackEnd)
	 *
	 * This operation delegates to
	 * <code>${operation.backEndServiceOperation.owner.fullyQualifiedName}.${operation.backEndServiceOperation.name}</code>
#end
	 */
#if ($operation.callingBackEnd)
    $visibility $returnType ${operation.name}(org.apache.struts.action.ActionMapping mapping, $operation.interfaceType form, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception
	{
		${operation.backEndServiceOperation.owner.accessorImplementation}.${operation.backEndServiceOperation.name}(
#set ($comma = "")
#foreach ($argument in $operation.backEndServiceOperation.arguments)
		${comma}form.${argument.getterName}()
#set ($comma = ", ")
#end
		);
	}
#else
    $visibility abstract $returnType ${operation.name}(org.apache.struts.action.ActionMapping mapping, $operation.interfaceType form, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception;
#end

#set ($returnType = false)
#end
#foreach ($sessionObject in $sessionObjects)
#set ($accessorSuffix = $stringUtils.capitalize($sessionObject.name))
    /**
     * Returns the current $sessionObject.name from the session found in the argument request.
     * <p/>
     * In case an object was found in the session but it was not of the correct type, this method
     * will return <code>null</code>.
     * <p/>
     * If there is no session, it will be created; if the session would not contain a session-object
     * the object will be instantiated and subsequently stored in the session.
     */
    protected final $sessionObject.fullyQualifiedName get${accessorSuffix}(javax.servlet.http.HttpServletRequest request)
    {
        $sessionObject.fullyQualifiedName object = null;
        javax.servlet.http.HttpSession session = request.getSession(true);

        Object attribute = session.getAttribute(${sessionObject.fullyQualifiedName}.SESSION_KEY);

#set($keep = "false")
#if(($sessionObject.findTaggedValue("$keepSO") && $sessionObject.findTaggedValue("$keepSO")))
#set($keep = "true")
#end
#set($counterSO = false)
#if($sessionObject.findTaggedValue("$sessionObjectCounter") && ($sessionObject.findTaggedValue("$sessionObjectCounter") && !$sessionObject.findTaggedValue("$sessionObjectCounter").equals("")))
#set($counterSO = true)
#end
		if (attribute instanceof $sessionObject.fullyQualifiedName)
		{
			object = ($sessionObject.fullyQualifiedName)attribute;
#if($keep.equals("false") && $counterSO)
            ${servletPackage}.SessionObjectUtil.resetSessionObjetCounter(request, object.SESSION_KEY, object.getIterations());
#end
		}
		else if (attribute == null)
		{
			object = new $sessionObject.fullyQualifiedName ();
            set${accessorSuffix}(request, object);
		}

		return object;
	}

    /**
     * Set the argument $sessionObject.name object in the session corresponding with the argument request.
     * In case the session would not exist it will be created.
     */
    protected final void set${accessorSuffix}(javax.servlet.http.HttpServletRequest request, $sessionObject.fullyQualifiedName object)
    {
        set${accessorSuffix}(request, object, true);
    }

    /**
     * Set the argument $sessionObject.name object in the session corresponding with the argument request.
     * Any existing object will be overwritten.
     *
     * @param createSession denotes whether or not the session should be created automatically in case it
     * would not yet exist
     */
    protected final void set${accessorSuffix}(javax.servlet.http.HttpServletRequest request, $sessionObject.fullyQualifiedName object, boolean createSession)
    {
        javax.servlet.http.HttpSession session = request.getSession(createSession);
        if (session != null)
		{
#set($keep = "false")
#if(($sessionObject.findTaggedValue("$keepSO") && $sessionObject.findTaggedValue("$keepSO")))
#set($keep = "true")
#end
#set($counterSO = false)
#if($sessionObject.findTaggedValue("$sessionObjectCounter") && ($sessionObject.findTaggedValue("$sessionObjectCounter") && !$sessionObject.findTaggedValue("$sessionObjectCounter").equals("")))
#set($counterSO = true)
#end
#if($keep.equals("true") || !$counterSO)
	    ${servletPackage}.SessionObjectUtil.setSessionObject(request, object, ${sessionObject.fullyQualifiedName}.SESSION_KEY, "$controller.useCase.name", $keep);
#elseif($keep.equals("false") && $counterSO)
	    ${servletPackage}.SessionObjectUtil.setSessionObject(request, object, ${sessionObject.fullyQualifiedName}.SESSION_KEY, $sessionObject.findTaggedValue("$sessionObjectCounter"));
#end
		}
	}

    /**
     * Removes the argument $sessionObject.name object from the session corresponding with the argument request.
     * In any of the following cases this method will do nothing:
     * <ul>
     *   <li>No session corresponds to the argument request</li>
     *   <li>No $sessionObject.name object could be found in the request</li>
     *   <li>The object is not of the correct type</li>
     * </ul>
     */
    protected final void remove${accessorSuffix}(javax.servlet.http.HttpServletRequest request)
    {
        javax.servlet.http.HttpSession session = request.getSession(false);
        if (session != null)
        {
            Object attribute = session.getAttribute(${sessionObject.fullyQualifiedName}.SESSION_KEY);
            if (attribute instanceof $sessionObject.fullyQualifiedName)
            {
            	${servletPackage}.SessionObjectUtil.removeSessionObject(request, ${sessionObject.fullyQualifiedName}.SESSION_KEY);
            }
        }
    }

#end

    protected final void setForward(javax.servlet.http.HttpServletRequest request, String modulo, String caminho){
    	String path = (request.getServerName() + 
    		       (request.getServerPort( ) != 80 ? ":" + request.getServerPort( ) : "") + 
    		       "$contextoPrincipal" + "/" + modulo + "/" + caminho).replaceAll("//", "/");
 	path = request.getScheme() + "://" + path;
    	request.setAttribute("$forwardKey", path);
    	request.setAttribute("$forwardKeyModule", modulo);
    }	

#foreach ($serviceRef in $controller.serviceReferences)
#if ($stringUtils.isNotBlank($serviceRef.targetElement.accessorImplementation))
	/**
	 * Returns a reference to the $serviceRef.name back-end service.
	 */
#set($isServiceFactory = false)
#if($serviceRef.hasExactSterotype("ServiceFactory"))
#set($isServiceFactory = true)
#end

	/**
	 * Método a ser utilizado na recuperação de serviços.
	 */
	protected final ${serviceRef.targetElement.fullyQualifiedName}BI ${serviceRef.getterName}() throws Exception {
		return (${serviceRef.targetElement.fullyQualifiedName}BI) br.ufrj.coppetec.ServiceLocator.instance().getServiceBI(null, "${serviceRef.targetElement.packageName}.${serviceRef.targetElement.name}", ${serviceRef.targetElement.packageName}.${serviceRef.targetElement.name}Home.class);
	}

	/**
	 * Método utilizado em aplicações legadas.
	 * Em novas aplicações, utilizar o metodo ${serviceRef.getterName}().
	 */
	@Deprecated
	protected final ${serviceRef.targetElement.fullyQualifiedName}BI ${serviceRef.getterName}(javax.servlet.http.HttpServletRequest request) throws Exception {
		return ${serviceRef.getterName}();
	}

#end
#end
#set($pages = $controller.getUseCase().getPages())
#foreach($page in $pages)
#foreach($variable in $page.getPageVariables())
#if($variable.tableType.equals("jtable") && $variable.table)
#set($tableName = $variable.name.subSequence(0,1).toUpperCase().concat($variable.name.substring(1)) )
#set($actionName = "")
#set($palavras = ${variable.getJsp().getName().split(" ")})
#foreach($palavra in $palavras)
#set($aux=$palavra.subSequence(0,1).toUpperCase().concat($palavra.substring(1)))
#set($actionName = $actionName.concat("$aux"))
#end
#set($actionName=$actionName.concat($tableName))
#set($actions = $page.getActions())

	protected abstract Integer get${actionName}TableLength(PaginationStrategy paginacao, String propriedade, Boolean desc, #foreach($action in $actions)#if($action.ajaxAction && $action.ajaxTable.equals($parametro.name))#foreach($param in $action.getActionParameters())#if($param.type.name.equalsIgnoreCase("integer") || $param.type.name.equalsIgnoreCase("Double") || $param.type.name.equalsIgnoreCase("Boolean")) $param.type.fullyQualifiedName #else String#end $param.name, #end#end#end HttpServletRequest request, HttpServletResponse response) throws Exception;

	protected abstract Collection load${actionName}Table(PaginationStrategy paginacao, String propriedade, Boolean desc, #foreach($action in $actions)#if($action.ajaxAction && $action.ajaxTable.equals($parametro.name))#foreach($param in $action.getActionParameters())#if($param.type.name.equalsIgnoreCase("integer") || $param.type.name.equalsIgnoreCase("Double") || $param.type.name.equalsIgnoreCase("Boolean")) $param.type.fullyQualifiedName #else String#end $param.name, #end#end#end HttpServletRequest request, HttpServletResponse response) throws java.lang.Exception;

	protected void load${actionName}Table(HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		Integer linhas = (request.getParameter("jtPageSize") != null) ? Integer.valueOf(request.getParameter("jtPageSize")) : 10;
		
		Integer paginacao = (request.getParameter("jtStartIndex") != null) ? Integer.valueOf(request.getParameter("jtStartIndex")) / linhas : 0;
		
		String propriedade = request.getParameter("jtSorting") != null ? request.getParameter("jtSorting").split(" ")[0] : "";
	
		Boolean desc = new Boolean(false);
		
		if(request.getParameter("jtSorting") != null)
		    desc = request.getParameter("jtSorting").split(" ")[1].equalsIgnoreCase("DESC");
			
		PaginationStrategy strategy = new ${packageUtil}.PaginationSimple(paginacao, linhas, 1);

#foreach($action in $page.getActions())
#if($action.ajaxAction && $action.ajaxTable.equals($parametro.name))
#foreach($param in $action.getActionParameters())
#if($param.type.name.equalsIgnoreCase("Integer")) 
		$param.type.name $param.name = null;

		try {
			$param.name = request.getParameter("${param.name}") == null ? null : (request.getParameter("${param.name}").toString().equals("")? null : Integer.valueOf(request.getParameter("${param.name}").toString()));
		} catch(java.lang.NumberFormatException e) {

		}
		
#elseif($param.type.name.equalsIgnoreCase("Double"))
		$param.type.name $param.name = null;
		try {
			 $param.name = request.getParameter("${param.name}") == null ? null : (request.getParameter("${param.name}").toString().equals("")? null ? Double.valueOf(request.getParameter("${param.name}").toString()));
		} catch(java.lang.NumberFormatException e) {

		}
		
#elseif($param.type.name.equalsIgnoreCase("Boolean"))
		$param.type.name $param.name = request.getParameter("${param.name}") == null ? null : (request.getParameter("${param.name}").toString().equals("") ? null : Boolean.valueOf(request.getParameter("${param.name}").toString())); 
		
#else 
		String $param.name = this.extractParameterFromViewContainer(request, "${param.name}");
		
#end
#end
#end
#end
		
		Collection rows = this.load${actionName}Table(strategy,propriedade,desc,#foreach($action in $page.getActions())#if($action.ajaxAction && $action.ajaxTable.equals($parametro.name))#foreach($param in $action.getActionParameters())$param.name,#end#end#end request,response);
		
		String [] columns = {
#foreach($_action in $page.getActions())
#foreach($_parameter in $_action.getActionParameters())
			"$_parameter.name",		
#end
#end
#set($i=0)
#set($limit=$variable.tableColumns.size() - 1)
#foreach($column in $variable.tableColumns)
#if($i != $limit)
#if($column.name)
			"$column.name",
#else
			"$column",
#end
#else
#if($column.name) 
			"$column.name"
#else
			"$column"
#end
#end
#set($i=$i+1)
#end		
		};
		
		JSONArray array = new JSONArray();
		
		if(rows != null)
			array = this.parseCollectionToJSON(rows,columns);
        
        JSONObject obj = new JSONObject();
        
        obj.put("Result","OK");
        obj.put("TotalRecordCount", this.get${actionName}TableLength(strategy,propriedade,desc, #foreach($action in $page.getActions())#if($action.ajaxAction && $action.ajaxTable.equals($parametro.name))#foreach($param in $action.getActionParameters())$param.name,#end#end#end request,response));
        obj.put("Records",array);
        
        response.setContentType("application/json;charset=UTF-8");
        response.getWriter().print(obj.toString());
        response.getWriter().flush();
	}
#end
#end
#foreach($parameter in $page.allUniqueActionParameters)
#if($parameter.autocomplete)
#if($parameter.autocomplete)
#set($pageName = $parameter.name) 
#set($palavras = $parameter.getJsp().getName().split(" "))
#foreach($palavra in $palavras)
#set($aux=$palavra.subSequence(0,1).toUpperCase().concat("$palavra.substring(1)"))
#set($pageName = $pageName.concat("$aux"))
#end
#set($package = ${controller.getPackagePath().replace("/", ".")})

	protected abstract String[] ${pageName}AutoComplete(String query, HttpServletRequest request,HttpServletResponse response) throws Exception;
	
	public void ${pageName}AutoComplete(HttpServletRequest request,HttpServletResponse response) throws Exception
	{	
		String [] result;
    	
    	String query = request.getParameter("query");
    	
    	if(query == null)
    		query = "";
  
		result =  this.${pageName}AutoComplete(query, request, response);

		JSONArray jsonArray = new JSONArray();
		
		if(result != null)
		{
			for (String string : result)
			{
				jsonArray.add(string);
		    }
		}
    	
		response.setContentType("application/json;charset=UTF-8");
        response.getWriter().print(jsonArray.toString());
        response.getWriter().flush();
    	
	}
#end
#end
#end
#end


#foreach($dependencia in  $controller.sourceDependencies)
#if($dependencia.targetElement.hasExactStereotype("ServiceFactory"))
#set($factorySelectNodeName = false)
#foreach($bean in $dependencia.targetElement.allSpecializations)
#if($factorySelectNodeName == false)
#if(${bean.findTaggedValue("$ServiceFactorySelectNodeName").length()} > 0)
#set($factorySelectNodeName = true)
#end
#end
#end

	/**
	 * Método a ser utilizado na recuperação de serviços.
	 */
	protected final ${dependencia.targetElement.fullyQualifiedName}BI ${dependencia.getterName}(#if($factorySelectNodeName == false)br.ufrj.coppetec.Entity entity#end)	throws Exception {
		return ${dependencia.targetElement.fullyQualifiedName}Factory.getService(#if($factorySelectNodeName == false)entity#end);
	}

	/**
	 * Método utilizado em aplicações legadas.
	 * Em novas aplicações, utilizar o método ${dependencia.getterName}(#if($factorySelectNodeName == false)br.ufrj.coppetec.Entity#end).
	 */
	@Deprecated
	protected final ${dependencia.targetElement.fullyQualifiedName}BI ${dependencia.getterName}(javax.servlet.http.HttpServletRequest request#if($factorySelectNodeName == false), br.ufrj.coppetec.Entity entity#end) throws Exception {
		return ${dependencia.getterName}(#if($factorySelectNodeName == false)entity#end);
	}
#end
#end
	/**
	 * Returns the "ServiceBI" for a given service.
	 * 
	 * Usage: ServiceBI serviceBI = getService(ServiceBI.class);
	 * 
	 * @param clazz The "ServiceBI.class"
	 * @return The service returned.
	 * @throws Exception
	 */
	protected <T> T getService(Class<T> clazz) {
		return br.ufrj.coppetec.ServiceLocator.instance().getServiceBI(clazz);
	}

	/**
	 * Método utilizado em aplicações legadas.
	 * Em novas aplicações, utilizar o método getService(Class<T>).
	 */
	@Deprecated
	protected <T> T getService(Class<T> clazz, javax.servlet.http.HttpServletRequest request) throws Exception {
		return getService(clazz);
	}

	protected java.util.Collection<String> getModoOperacao(javax.servlet.http.HttpServletRequest request) {
		return getModoOperacao("${controller.useCase.package.webModuleName}${controller.useCase.actionPath}.do", request);
	}

	protected java.util.Collection<String> getModoOperacao(String nomeCasoDeUso, javax.servlet.http.HttpServletRequest request) {
		java.util.Collection<String> modoOperacao = new java.util.ArrayList();
		if(request.getSession().getAttribute(Constantes.MODO_OPERACAO) != null){
			java.util.HashMap map = (java.util.HashMap)request.getSession().getAttribute(Constantes.MODO_OPERACAO);
			if(nomeCasoDeUso != null){
				if(map.get(nomeCasoDeUso) != null){
					String modoOperacaoStr = (String)map.get(nomeCasoDeUso);
					java.util.StringTokenizer st = new java.util.StringTokenizer(modoOperacaoStr, ",");
					while(st.hasMoreTokens()){
						String next = st.nextToken();
						modoOperacao.add(next);
					}
					}
					}
		}
		return modoOperacao;
	}
	
	protected String getNomeCasoUso() {
		return "${controller.useCase.package.webModuleName}${controller.useCase.actionPath}.action";
	}
}
#end