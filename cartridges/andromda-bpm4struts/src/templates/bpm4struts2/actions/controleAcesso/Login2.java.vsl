// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: Login2.java.vsl in andromda-bpm4struts-cartridge-coppetec.
//
#set ($className = "Login2")
#set ($generatedFile = "${className}.java")
#if($stringUtils.isNotEmpty($controleAcessoDir))
package $controleAcessoDir;
#set ($generatedFile = "${stringUtils.replace($controleAcessoDir,'.','/')}/${generatedFile}")
#end

import javax.security.auth.Subject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts2.interceptor.ServletRequestAware;
import org.apache.struts2.interceptor.ServletResponseAware;

import java.util.Enumeration;

import java.util.Map;
import java.util.HashMap;
import accessControl.AplicacoesSingleton;
import accessControl.Aplicacao;

#set($packageUtil = "${customTypesPackage}.${stringUtils.replace($utilDir,'/','.')}")
import ${packageUtil}.Constantes;

import com.opensymphony.xwork2.ActionSupport;

public abstract class ${className} extends ActionSupport implements ServletRequestAware, ServletResponseAware
{
	protected String __casoDeUso = null;
	protected String __urlCasoDeUso = null;
	protected String __modulo = null;
	protected String __contexto = null;

	private String nextPath = null;

	public java.lang.String getNextPath()
	{
		return nextPath;
	}

	public void setNextPath(java.lang.String nextPath)
	{
		this.nextPath = nextPath;
	}

	protected HttpServletResponse response;
	protected HttpServletRequest request;

	public void setServletResponse(HttpServletResponse response)
	{
		this.response = response;
	}

	public void setServletRequest(HttpServletRequest request)
	{
		this.request = request;
	}
	
	public void setSessionControlInfo()
	{
		String userSessionId = null;
		Cookie[] cookies = request.getCookies();
		if(cookies!=null)
    		for (Cookie cookie : cookies)
    			if(cookie.getName().equals("sessionkey"))
    				userSessionId = cookie.getValue();

		HashMap<String, HashMap<String, Aplicacao>> aplicacoes = AplicacoesSingleton.instance().getAplicacoes();
	    		
		if(aplicacoes == null)
		{
			aplicacoes = new HashMap<String, HashMap<String, Aplicacao>>();
			AplicacoesSingleton.instance().setAplicacoes(aplicacoes);
		}
		
		HashMap<String, Aplicacao> aplicacoesUsuario = null;

		if(!aplicacoes.containsKey(userSessionId))
		{
			aplicacoes.put(userSessionId,new HashMap<String, Aplicacao>());
		}

		aplicacoesUsuario = aplicacoes.get(userSessionId);
		
		if(!aplicacoesUsuario.containsKey(request.getContextPath()))
		{
			Aplicacao aplicacao = new Aplicacao(request.getSession().getId());
    		aplicacoesUsuario.put(request.getContextPath(),aplicacao);
		}
		
	}

	public String execute() throws Exception
	{
		loadUseCaseInfo();
		
		setSessionControlInfo();
		
		//org.apache.commons.beanutils.BeanUtils.populate(form, request.getParameterMap());

		String forward = null;

		if(request.getSession().getAttribute(Constantes.TROCA_SENHA_OBRIGATORIA) != null && request.getParameter(Constantes.BUTTON_TROCA_SENHA) == null)
		{
			forward = _verificaTrocaSenhaObrigatoria();
		}
		else
		{
			forward = _validarSessao();
		}

		try
		{
			//request.getSession().setAttribute("mapping", mapping);
			//request.getSession().setAttribute("form", form);
		}
		catch (java.lang.Exception exception)
		{
#populateCurrentFormOnError("			")
			throw exception;
		}

		//request.getSession().setAttribute("form", form);

		Boolean aplicacaoGerenciaTrocaDePortas = (Boolean) request.getSession().getServletContext().getAttribute("aplicacaoGerenciaTrocaDePortas");
		if (aplicacaoGerenciaTrocaDePortas)
		{
//			if(forward!=null && !(forward.getPath().contains("ForwardAction")))
//			{
//				if(forward != null && forward.getPath().startsWith("/secure"))
//				{
//					url = "https://" + (request.getServerName() + ":" + request.getSession().getServletContext().getAttribute("httpsPort") + "//$projectId" + forward.getPath()).replaceAll("//", "/");
//				}
//				else
//				{
//					if(forward != null && request.getScheme().equals("https"))
//					{
//						if (!forward.getPath().startsWith("http"))
//						{
//							url = "http://" + (request.getServerName() + ":" + request.getSession().getServletContext().getAttribute("httpPort") + request.getContextPath() + forward.getPath()).replaceAll("//", "/");
//						}
//						if (forward.getPath().startsWith("https"))
//						{
//							String httpPort = (String) request.getSession().getServletContext().getAttribute("httpPort");
//							String httpsPort = (String) request.getSession().getServletContext().getAttribute("httpsPort");
//							url = forward.getPath().replaceAll("https", "http").replaceAll(httpsPort, httpPort);
//						}
//					}
//				}
//			}
		}

		// invalida sessao https ao trocar para http (passa a ter somente uma sessao para ambos)
//		if (request.getScheme().equals("https") && forward != null && forward.getPath().startsWith("http://"))
//			request.getSession().invalidate();
		
		return forward;
	}

	/**
	 * 
	 */
	private String _validarSessao() throws Exception
	{
		String forward = null;
		forward = __sessaoValida();
		return forward;
	}

	/**
	 * 
	 */
	private String _verificaTrocaSenhaObrigatoria() throws Exception
	{
		String forward = "troca.de.senha.obrigatoria"; 
		Subject subject = (Subject) request.getSession().getAttribute(Constantes.USER_SESSION);
		String usuario = ControleAcessoImpl.getCallerPrincipal(subject).getName();
		//LoginFormImpl formImpl = (LoginFormImpl)form;
		//formImpl.setUsuario(usuario); 
		return forward;
	}

	/**
	 * 
	 */
	private String _verificaLoginESenha() throws Exception
	{
		String forward = null;
		forward = __possuiLoginSenha();
		return forward;
	}

	/**
	 * 
	 */
	private String _verificaTrocaDeSenha() throws Exception
	{
		String forward = null;
		forward = __precisaTrocarSenha();
		return forward;
	}	

	/**
	 * 
	 */
	private String _verificarLogin() throws Exception
	{
		String forward = null;
		forward = __verificarLogin();
		return forward;
	}

	/**
	 * 
	 */
	private String __possuiLoginSenha() throws Exception
	{
		final String value = String.valueOf(LoginControllerFactory.getLoginControllerInstance().possuiLoginSenha(null, request, response, null));

		if (value.equals("false"))
		{

			String forward = "entrar.login";
			
			if (__urlCasoDeUso != null && __contexto != null)
            {
                Enumeration nomeParametros = request.getParameterNames();
                StringBuffer parametros = new StringBuffer("");
                if(nomeParametros.hasMoreElements())
                {
                    parametros.append("?");
                    while(nomeParametros.hasMoreElements()) 
                    {
                        String nome = nomeParametros.nextElement().toString();
                        parametros.append(nome+"="+request.getParameter(nome));
                        if(nomeParametros.hasMoreElements()) 
                        {
                            parametros.append("@AND@");
                        }
                    }
                }
                setNextPath(__contexto + __urlCasoDeUso+parametros.toString());
            }
			return forward;
		}
		if (value.equals("true"))
		{
			return _verificarLogin();
		}

		// we take the last action in case we have an invalid return value from the controller
		return _verificarLogin();
	}

	/**
	 * 
	 */
	private String __precisaTrocarSenha() throws Exception
	{
		final String value = String.valueOf(LoginControllerFactory.getLoginControllerInstance().precisaTrocarSenha(null,  null, request, response, null));

		if (value.equals("false"))
		{
			return _verificarPermissao();
		}
		if (value.equals("true"))
		{
			
			return "troca.de.senha.obrigatoria";
		}

		// we take the last action in case we have an invalid return value from the controller
		return "troca.de.senha.obrigatoria";
	}

	/**
	 * 
	 */
	private String __sessaoValida() throws Exception
	{
		final String value = String.valueOf(LoginControllerFactory.getLoginControllerInstance().sessaoValida(null, request, response, null));

		if (value.equals("true"))
		{
			return _verificarPermissao();
		}
		if (value.equals("false"))
		{
			return _verificaLoginESenha();
		}

		// we take the last action in case we have an invalid return value from the controller
		return _verificaLoginESenha();
	}

	/**
	 * 
	 */
	private String __verificarLogin() throws Exception
	{
		final String value = String.valueOf(LoginControllerFactory.getLoginControllerInstance().verificarLogin(null, null, request, response, null));

		if (value.equals("false"))
		{
			request.getSession().removeAttribute(Constantes.FORWARD);

			String forward = "entrar.login";
			
			if (__urlCasoDeUso != null && __contexto != null)
			{
				Enumeration nomeParametros = request.getParameterNames();
                StringBuffer parametros = new StringBuffer("");
                if(nomeParametros.hasMoreElements())
                {
                    parametros.append("?");
                    while(nomeParametros.hasMoreElements()) 
                    {
                        String nome = nomeParametros.nextElement().toString();
                        parametros.append(nome+"="+request.getParameter(nome));
                        if(nomeParametros.hasMoreElements()) 
                        {
                            parametros.append("@AND@");
                        }
                    }
                }
                setNextPath(__contexto + __urlCasoDeUso+parametros.toString());
			}
			return forward;
		}
		if (value.equals("true"))
		{
			return _verificaTrocaDeSenha();
		}

		// we take the last action in case we have an invalid return value from the controller
		return _verificaTrocaDeSenha();
	}

	/**
	 * Returns true if <strong>NO</strong> errors
	 * are present in the request.  This includes default validation
	 * errors produced by the struts framework and the exception
	 * handler errors caught by the pattern matching
	 * exception handler.
	 *
	 * @return true if errors are <strong>not</strong> present, false otherwise.
	 */
	private boolean errorsNotPresent(HttpServletRequest request)
	{
		return this.getExceptionHandlerErrors(request).isEmpty() &&
			(this.getErrors() == null || this.getErrors().isEmpty());
	}

	/**
	 * <p>
	 *  Retrieves the exception handler messages (if any). Creates a new
	 *  ActionMessages instance and returns that if one doesn't already exist.
	 * </p>
	 */
	private org.apache.struts.action.ActionMessages getExceptionHandlerErrors(HttpServletRequest request)
	{
		org.apache.struts.action.ActionMessages errors =
			(org.apache.struts.action.ActionMessages)request.getAttribute("$errorMessagesKey");
		if (errors == null)
		{
			errors = new org.apache.struts.action.ActionMessages();
			request.setAttribute("$errorMessagesKey", errors);
		}
		return errors;
	}

	private String _verificarPermissao() throws Exception
	{
		final String value = String.valueOf(LoginControllerFactory.getLoginControllerInstance().verificarPermissao(null, request, response, null));

		if (value.equals("true"))
		{
			return particularExecute();
		}
		else
		{

			String forward = "entrar.login";
			
			if (__urlCasoDeUso != null && __contexto != null)
			{
				Enumeration nomeParametros = request.getParameterNames();
                StringBuffer parametros = new StringBuffer("");
                if(nomeParametros.hasMoreElements())
                {
                    parametros.append("?");
                    while(nomeParametros.hasMoreElements()) 
                    {
                        String nome = nomeParametros.nextElement().toString();
                        parametros.append(nome+"="+request.getParameter(nome));
                        if(nomeParametros.hasMoreElements()) 
                        {
                            parametros.append("@AND@");
                        }
                    }
                }
                setNextPath(__contexto + __urlCasoDeUso+parametros.toString());
			}
			return forward;
		}
	}

	//*************

	public abstract String particularExecute() throws Exception;
	public abstract void loadUseCaseInfo();
}
