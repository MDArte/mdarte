#set ($className = "ControllerAbstract")
#set ($generatedFile = "$stringUtils.replace($servletPackage, '.', '/')/${className}.java")
#set($gerar = false)
#if(${controller.useCase.useCaseOldStruts})
#set($gerar = true)
#end
##
##  START TEMPLATE
##
#if($gerar)
// license-header java merge-point
package ${servletPackage};
#set($packageUtil = "${customTypesPackage}.${stringUtils.replace($utilDir,'/','.')}")
import ${packageUtil}.Constantes;
import java.util.HashMap;
import java.util.Map;
import org.json.simple.JSONObject;
import org.json.simple.JSONArray;
import org.apache.struts.util.MessageResources;


public abstract class ControllerAbstract implements java.io.Serializable
{
	
	
    /**
     * Stores a warning message in the session, if any other warning messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param session the session to which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     * @param arguments any arguments used within the message
     */
    protected final void saveWarningMessage(javax.servlet.http.HttpServletRequest request, java.lang.String message, java.lang.String[] arguments)
    {
        final javax.servlet.http.HttpSession session = request.getSession();

        // we explicitely store and retrieve the messages from the session, as opposed to using
        // Action.saveMessages because this constroller does not have access to the current Action instance
        org.apache.struts.action.ActionMessages messages = (org.apache.struts.action.ActionMessages)session.getAttribute(org.apache.struts.Globals.MESSAGE_KEY);
        if (messages == null)
        {
            messages = new org.apache.struts.action.ActionMessages();
            session.setAttribute(org.apache.struts.Globals.MESSAGE_KEY, messages);
        }
        messages.add("$warningMessagesKey", new org.apache.struts.action.ActionMessage(message, arguments));
    }

    /**
     * Stores a warning message in the session, if any other warning messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param session the session to which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     * @see ${sharp}saveWarningMessage(javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.String[])
     */
    protected final void saveWarningMessage(javax.servlet.http.HttpServletRequest request, java.lang.String message)
    {
        this.saveWarningMessage(request, message, null);
    }

    /**
     * Stores a success message in the session, if any other success messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param request the request from which the session will be taken into which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     */
    protected final void saveSuccessMessage(javax.servlet.http.HttpServletRequest request, java.lang.String message, java.lang.String[] arguments)
    {
        final javax.servlet.http.HttpSession session = request.getSession();

        // we explicitely store and retrieve the messages from the session, as opposed to using
        // Action.saveMessages because this constroller does not have access to the current Action instance
        org.apache.struts.action.ActionMessages messages = (org.apache.struts.action.ActionMessages)session.getAttribute(org.apache.struts.Globals.MESSAGE_KEY);
        if (messages == null)
        {
            messages = new org.apache.struts.action.ActionMessages();
            session.setAttribute(org.apache.struts.Globals.MESSAGE_KEY, messages);
        }
        messages.add("$successMessagesKey", new org.apache.struts.action.ActionMessage(message, arguments));
    }

    /**
     * Stores a success message in the session, if any other success messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param request the request from which the session will be taken into which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     * @see ${sharp}saveSuccessMessage(javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.String[])
     */
    protected final void saveSuccessMessage(javax.servlet.http.HttpServletRequest request, java.lang.String message)
    {
        this.saveSuccessMessage(request, message, null);
    }

    /**
     * Stores an error message in the session, if any other error messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param request the request from which the session will be taken into which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     * @see ${sharp}saveSuccessMessage(javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.String[])
     */
    protected final void saveErrorMessage(javax.servlet.http.HttpServletRequest request, java.lang.String message, java.lang.String[] arguments)
    {
        final javax.servlet.http.HttpSession session = request.getSession();

        // we explicitely store and retrieve the messages from the session, as opposed to using
        // Action.saveMessages because this constroller does not have access to the current Action instance
        org.apache.struts.action.ActionMessages messages = (org.apache.struts.action.ActionMessages)session.getAttribute(org.apache.struts.Globals.MESSAGE_KEY);
        if (messages == null)
        {
            messages = new org.apache.struts.action.ActionMessages();
            session.setAttribute(org.apache.struts.Globals.MESSAGE_KEY, messages);
        }
        messages.add("$errorMessagesKey", new org.apache.struts.action.ActionMessage(message, arguments));
    }

    /**
     * Stores an error message in the session, if any other error messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param request the request from which the session will be taken into which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     * @see ${sharp}saveSuccessMessage(javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.String[])
     */
    protected final void saveErrorMessage(javax.servlet.http.HttpServletRequest request, java.lang.String message)
    {
        this.saveErrorMessage(request, message, null);
    }
	
	/**
	 * M�todo a ser utilizado na recupera��o de servi�os.
	 */
	protected <T> T getService(Class<T> clazz) throws Exception	{
		return br.ufrj.coppetec.ServiceLocator.instance().getServiceBI(clazz);
	}

	protected java.util.Collection<String> getModoOperacao(String nomeCasoDeUso, javax.servlet.http.HttpServletRequest request) {
		java.util.Collection<String> modoOperacao = new java.util.ArrayList();
		if(request.getSession().getAttribute(Constantes.MODO_OPERACAO) != null){
			java.util.Map map = (java.util.Map)request.getSession().getAttribute(Constantes.MODO_OPERACAO);
			if(nomeCasoDeUso != null){
				if(map.get(nomeCasoDeUso) != null){
					String modoOperacaoStr = (String)map.get(nomeCasoDeUso);
					java.util.StringTokenizer st = new java.util.StringTokenizer(modoOperacaoStr, ",");
					while(st.hasMoreTokens()){
						String next = st.nextToken();
						modoOperacao.add(next);
					}
				}
			}
		}
		return modoOperacao;
	}
	
	protected void adicionaModoOperacao(String modoOperacao, javax.servlet.http.HttpServletRequest request) {
		this.adicionaModoOperacao(this.getNomeCasoUso(), modoOperacao, request);
	}
	
	protected void adicionaModoOperacao(String casoUso, String modoOperacao, javax.servlet.http.HttpServletRequest request) {
		if(possuiModoOperacao(casoUso, modoOperacao, request))
			return;
		
		Map listaModosOperacao = (Map) request.getSession().getAttribute(Constantes.MODO_OPERACAO);
		
		if(listaModosOperacao == null) {
			listaModosOperacao = new HashMap<String, String>();
			request.getSession().setAttribute(Constantes.MODO_OPERACAO, listaModosOperacao);
		}
		
		String modosOperacao = (String) listaModosOperacao.get(casoUso);
		modosOperacao += "," + modoOperacao;
		
		listaModosOperacao.put(casoUso, modosOperacao);
	}
	
	protected boolean possuiModoOperacao(String modoOperacao, javax.servlet.http.HttpServletRequest request) 	{
		return this.possuiModoOperacao(this.getNomeCasoUso(), modoOperacao, request);
	}
	
	protected boolean possuiModoOperacao(String casoUso, String modoOperacao, javax.servlet.http.HttpServletRequest request)
	{
		Map listaModosOperacao = (Map) request.getSession().getAttribute(Constantes.MODO_OPERACAO);
		
		if(listaModosOperacao == null)
			return false;
		else
			return this.possuiModoOperacao(casoUso, modoOperacao, (String) listaModosOperacao.get(casoUso));
	}
	
	protected boolean possuiModoOperacao(String modoOperacao, String modosOperacao) {
		return this.possuiModoOperacao(this.getNomeCasoUso(), modoOperacao, modosOperacao);
	}
	
	protected boolean possuiModoOperacao(String casoUso, String modoOperacao, String modosOperacao) {
		if(modoOperacao == null || modoOperacao.length() < 1)
			return false;
		if(modosOperacao == null || modosOperacao.length() < 1)
			return false;
		
		String lista[] = modosOperacao.split(",");
		for(String str:lista) {
			if(modoOperacao.equals(str))
				return true;
		}
		
		return false;
	}
	
	protected void removeModoOperacao(String modoOperacaoASerRemovido, javax.servlet.http.HttpServletRequest request) {
		this.removeModoOperacao(this.getNomeCasoUso(), modoOperacaoASerRemovido, request);
	}
	
	protected void removeModoOperacao(String casoUso, String modoOperacaoASerRemovido, javax.servlet.http.HttpServletRequest request) {
		Map listaModosOperacao = (Map) request.getSession().getAttribute(Constantes.MODO_OPERACAO);
		
		if(listaModosOperacao == null) {
			listaModosOperacao = new HashMap<String, String>();
			request.getSession().setAttribute(Constantes.MODO_OPERACAO, listaModosOperacao);
		}
		
		String modosOperacao = (String) listaModosOperacao.get(casoUso);
		if(modosOperacao != null && modosOperacao.contains(modoOperacaoASerRemovido)) {
			modosOperacao = modosOperacao.replace(modoOperacaoASerRemovido, "");
		}
		
		listaModosOperacao.put(casoUso, modosOperacao);
	}
	
	protected JSONObject parseObjectToJSON(Object object, String[] attributes ) throws Exception{
		
		java.lang.reflect.Method[] methods = object.getClass().getDeclaredMethods();
		
		if(object instanceof ${customTypesPackage}.${modelPackageName}.AbstractEntity)
			methods = object.getClass().getSuperclass().getDeclaredMethods();
				
		JSONObject obj = new JSONObject();

        for(int i = 0; i < attributes.length; i++) {
                
        	for(int j = 0; j < methods.length; j++) {
            
            	String methodName = "get".concat(attributes[i].subSequence(0,1).toString().toUpperCase().concat(attributes[i].substring(1)));
                        
                if(methods[j].getName().equals(methodName)) {
            
                    obj.put(attributes[i], String.valueOf(methods[j].invoke(object)));
                            
                	break;
                            
                }
            
        	}
    	}
        
		return obj;	
	}
	
	protected JSONArray parseArrayToJSON(Object[] objects, String[] attributes ) throws Exception {
		
		JSONArray array = new JSONArray();
		
		for(int i = 0; i < objects.length; i++){
			array.add(this.parseObjectToJSON(objects[i],attributes));
		}
		
		return array;
	}
	
	protected JSONArray parseCollectionToJSON(java.util.Collection objects, String[] attributes ) throws Exception {
		
		JSONArray array = new JSONArray();
		
		for(Object obj : objects){
			array.add(this.parseObjectToJSON(obj,attributes));
		}
		
		return array;
	}
	
	protected String extractParameterFromViewContainer(javax.servlet.http.HttpServletRequest request, String parameter) {
		return request.getParameter(parameter) == null ? "" : String.valueOf(request.getParameter(parameter));
	}
	
	protected java.util.Collection<String> getModoOperacao(javax.servlet.http.HttpServletRequest request) {
		return this.getModoOperacao(this.getNomeCasoUso(), request);
	}
	
	protected String getMessage(br.ufrj.coppetec.Enumeration eo, javax.servlet.http.HttpServletRequest request) {
		return getMessage(eo.getInternationalizationKey(), request);
	}
	
	protected String getMessage(String key, javax.servlet.http.HttpServletRequest request) {
		MessageResources messageResources = (MessageResources)request.getAttribute(org.apache.struts.Globals.MESSAGES_KEY);
		java.util.Locale locale = (java.util.Locale)request.getSession().getAttribute(org.apache.struts.Globals.LOCALE_KEY);
		
		return messageResources.getMessage(locale, key);
	}
	
	protected abstract String getNomeCasoUso();
}
#end