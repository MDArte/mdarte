## define se o modulo sendo processado eh o modulo principal
#set($isPrincipal = false)
#if ($package.contexto == ${contextoPrincipal})
#set ($isPrincipal = true)
#end
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: NovaConexao.java.vsl in andromda-bpm4struts-cartridge-coppetec.
//
#set ($generatedFile = "NovaConexao.java")
#if($stringUtils.isNotEmpty($controleAcessoDir))
package $controleAcessoDir;
#set ($generatedFile = "${stringUtils.replace($controleAcessoDir,'.','/')}/${generatedFile}")
#end

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.management.MBeanServer;
import org.jboss.security.util.MBeanServerLocator;
import javax.management.ObjectName;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.andromda.presentation.bpm4struts.ShareSessionUtil;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public class NovaConexao extends Action {

#if ($isPrincipal)
	private final String NOME_SISTEMA_PRINCIPAL = "${stringUtils.substring($contextoPrincipal, 1)}";
	private final String NOME_MODULO_PRINCIPAL = "$package.webModuleName";
	private final String NOME_ATRIBUTO_MODULOS_FECHADOS = "SECURE_FECHAR_SESSAO_MODULOS_FECHADOS";
	private final static List<String> modulosIgnorados = new ArrayList<String>();
	static {
		modulosIgnorados.add("layout");
		modulosIgnorados.add("help");
	}
#end

	private class SistemaModulo {
		public String sistema;
		public String modulo;
	}

	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
	{
		ActionForward forward = null;

## se nao estiver no modulo principal redireciona para o NovaConexao do modulo principal
#if (!$isPrincipal)
		// redireciona para o NovaConexao do modulo principal
		String uriForward = request.getScheme() + "://" + (request.getServerName() + (request.getServerPort( ) != 80 ? ":" + request.getServerPort( ) : "")).replace("//","/");
		forward = new ActionForward(uriForward + "${contextoPrincipal}/secure/NovaConexao.do", true);
		return forward;
#else
		java.util.Properties ports = new java.util.Properties();

		ports.setProperty("http.port","8080");
		ports.setProperty("https.port","8443");
		ports.setProperty("troca.de.porta.gerenciada.pela.aplicacao","false");
		ports.setProperty("jboss.ip.local","127.0.0.1");
		ports.setProperty("aplicacao.permite.uso.back.browser","true");

		// busca modulos da aplicacao
		MBeanServer server = MBeanServerLocator.locateJBoss();

		if (server == null)
			throw new IllegalStateException("No 'jboss' MBeanServer found!");

		String userSessionId = null;
		Cookie[] cookies = request.getCookies();

		for (Cookie cookie : cookies)
			if(cookie.getName().equals("sessionkey"))
				userSessionId = cookie.getValue();
		
		// Recupera mapa de aplicacoes do usuario no singleton
		HashMap<String,HashMap<String,Aplicacao>> aplicacoes = AplicacoesSingleton.instance().getAplicacoes();
		HashMap<String, Aplicacao> aplicacoesUsuario = aplicacoes.get(userSessionId);
		
		Iterator<Map.Entry<String,Aplicacao>> iterator = aplicacoesUsuario.entrySet().iterator();
		
		while(iterator.hasNext())
		{
			Map.Entry<String, Aplicacao> entry = iterator.next();
			Aplicacao aplicacao = entry.getValue();
			String modulo = entry.getKey();
			if(!modulo.equals(NOME_SISTEMA_PRINCIPAL))
			{
				String uriForward = request.getScheme() + "://" + (request.getServerName() + (request.getServerPort( ) != 80 ? ":" + request.getServerPort( ) : "")).replace("//","/");
				
				forward = new ActionForward(uriForward + ("/" + modulo + "/secure/ApagaSessao.do").replace("//","/"), true);
				
				URL url = new URL(forward.getPath());
				HttpURLConnection conn = (HttpURLConnection)url.openConnection();
	
				String jSessionId = aplicacao.getjSessionId();
			
				String cookiesString = "";
				cookiesString += "JSESSIONID="+jSessionId;
				cookiesString += "; sessionkey="+userSessionId;
				
				conn.setRequestProperty("Cookie",cookiesString);
	
				conn.connect();
					
				BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
				String inputLine;
	
				while ((inputLine = in.readLine()) != null) 
					System.out.println(inputLine);
				in.close();
	
				conn.disconnect();
				
				iterator.remove();
			}
		}
		
		// Limpa a lista de aplicacoes de usuario no singleton
		aplicacoes.remove(userSessionId);
		AplicacoesSingleton.instance().setAplicacoes(aplicacoes);
		 
		// fecha o proprio modulo principal
		request.getSession().invalidate();
		
## criar um metodo no ShareSessionUtil com um nome mais claro somente para isso?
		// apaga o mapa da sessao do contexto
		ShareSessionUtil.getMapFromContext(request, getServlet().getServletContext().getContext("${servletContext}"));

		// caso todos os modulos tenham sido fechados.. redireciona para tela de login
		forward = mapping.findForward("entrar.login");

		Boolean aplicacaoGerenciaTrocaDePortas = (Boolean) request.getSession().getServletContext().getAttribute("aplicacaoGerenciaTrocaDePortas");
		String scheme = aplicacaoGerenciaTrocaDePortas ? "https" : request.getScheme();
		String port = aplicacaoGerenciaTrocaDePortas ? ports.getProperty("https.port") : String.valueOf(request.getServerPort());

		response.sendRedirect(scheme + "://" + request.getServerName() + ":" + port + "${contextoPrincipal}" + forward.getPath());
		//return forward;
		return null;
#end
	}
}