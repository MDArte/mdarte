<project xmlns:j="jelly:core"
         xmlns:ant="jelly:ant"
         xmlns:util="jelly:util"
         xmlns:maven="jelly:maven"
         xmlns:i="jelly:interaction"
         xmlns:velocity="jelly:velocity">

  <!--==================================================================
              Creates an empty deployable application Maven J2EE project
      ==================================================================-->

    <!-- segundo objetivo efetivamente chamado-->

    <goal name="andromdapp:generate"
          prereqs="andromdapp:init"
          description="Generates an empty deployable AndroMDA Maven J2EE project">

        <ant:echo>+---------------------------------------------------------------------+</ant:echo>
        <ant:echo>|   G E N E R A T I N G   A n d r o M D A   J 2 E E   P R O J E C T   |</ant:echo>
        <ant:echo>+---------------------------------------------------------------------+</ant:echo>

        <ant:mkdir dir="${projectId}"/>

        <velocity:merge
            name="${projectId}/.project"
            basedir="${templatesDir}"
            template="/eclipse-project.vsl"/>

	<velocity:merge
            name="${projectId}/.classpath"
            basedir="${templatesDir}"
            template="/eclipse-classpath.vsl"/>

        <velocity:merge
            name="${projectId}/project.xml"
            basedir="${templatesDir}"
            template="/project.xml.vsl"/>

        <velocity:merge
            name="${projectId}/maven.xml"
            basedir="${templatesDir}"
            template="maven.xml.vsl"/>

        <velocity:merge
            name="${projectId}/build.properties"
            basedir="${templatesDir}"
            template="/build.properties.vsl"/>

        <velocity:merge
            name="${projectId}/project.properties"
            basedir="${templatesDir}"
            template="/project.properties.vsl"/>

        <velocity:merge
            name="${projectId}/readme.txt"
            basedir="${templatesDir}"
            template="/readme.txt.vsl"/>

        <ant:copy todir="${projectId}">
            <ant:fileset dir="${templatesDir}">
                <ant:include name="*.properties"/>
            </ant:fileset>
        </ant:copy>

        <j:if test="${projectType eq 'jboss' and modulos == 'false'}">
            <attainGoal name="andromdapp:generate-app-subproject"/>
        </j:if>

        <j:if test="${persistenceType eq 'hibernate'}">
            <attainGoal name="andromdapp:generate-ejb-subproject"/>
        </j:if>

        <j:if test = "${modulos == 'true'}">
            <attainGoal name="andromdapp:generate-${persistenceType}-subproject"/>
        </j:if>

        <attainGoal name="andromdapp:generate-common-subproject"/>
        
	<attainGoal name="andromdapp:generate-mda-subproject"/>
        
	<j:if test="${workflow}">
            <attainGoal name="andromdapp:generate-jbpm-subproject"/>
        </j:if>

        <j:if test="${web}">
            <attainGoal name="andromdapp:generate-web-subproject"/>
        </j:if>

        <ant:echo>|  </ant:echo>
        <ant:echo>|  New J2EE project generated to: '${basedir}/${projectId}'</ant:echo>
        <ant:echo>|  </ant:echo>
        <ant:echo>|  For more information on how to proceed from here read '${basedir}/${projectId}/readme.txt'</ant:echo>
        <ant:echo>|  </ant:echo>

    </goal>


        <!--==================================================================
              A generic generate module goal. It expects:
              ${moduleTemplatesDir} and ${moduleDir} to be specified.

        ==================================================================-->

    <!-- Cria o diretorio, faz merge do project.xml e copia todos .properties e .xml -->

    <goal name="andromdapp:generate-module"
          description="private internal goal">
        
	<maven:param-check value="${moduleTemplatesDir}" fail="true">
                Property "moduleTemplatesDir" is not set, please define before running 'andromdapp:generate-module'
        </maven:param-check>

        <maven:param-check value="${moduleDir}" fail="true">
                Property "moduleDir" is not set, please define before running 'andromdapp:generate-module'
        </maven:param-check>

        <ant:mkdir dir="${moduleDir}"/>

        <velocity:merge
          name="${moduleDir}/project.xml"
          basedir="${moduleTemplatesDir}"
          template="project.xml.vsl"/>

        <ant:copy todir="${moduleDir}">
            <ant:fileset dir="${moduleTemplatesDir}">
                <ant:include name="*.properties"/>
                <ant:include name="*.xml"/>
            </ant:fileset>
        </ant:copy>
    </goal>


  <!--==================================================================
              Creates the mda subproject directory.
      ==================================================================-->

    <goal name="andromdapp:generate-mda-subproject"
          prereqs="andromdapp:init"
          description="private internal goal">

        <j:set var="mdaDir" value="${projectId}/mda"/>

        <j:set var="mdaModelDir" value="${mdaDir}/src/uml"/>

        <j:set var="mdaTemplatesDir" value="${templatesDir}/mda"/>

        <ant:mkdir dir="${mdaModelDir}"/>

        <!-- copy the model file -->

        <ant:copy
            file="${mdaTemplatesDir}/src/uml/empty-model.xml"
            tofile="${mdaModelDir}/${projectNameNoWhitespace}.xml"/>

        <!-- copy the profiles -->

        <ant:copy todir="${mdaModelDir}/xml.zips">
            <ant:fileset dir="${mdaTemplatesDir}/src/uml/xml.zips"/>
        </ant:copy>

        <j:set var="mdaConfDir" value="${mdaDir}/conf"/>

        <ant:mkdir dir="${mdaConfDir}"/>

        <velocity:merge
            name="${mdaConfDir}/andromda.xml"
            basedir="${mdaTemplatesDir}/conf"
            template="andromda.xml.vsl"/>

        <velocity:merge
            name="${mdaDir}/project.xml"
            basedir="${mdaTemplatesDir}"
            template="project.xml.vsl"/>

        <velocity:merge
            name="${mdaDir}/project.properties"
            basedir="${mdaTemplatesDir}"
            template="project.properties.vsl"/>

        <ant:copy todir="${mdaDir}">
            <ant:fileset dir="${mdaTemplatesDir}">
                <ant:include name="*.xml"/>
            </ant:fileset>
        </ant:copy>

        <j:if test="${web}">
            <j:set var="mdaMappingsDir" value="${mdaDir}/conf/mappings"/>

        <j:set var="mdaTemplatesMappingsDir" value="${mdaTemplatesDir}/conf/mappings"/>

        <ant:mkdir dir="${mdaMappingsDir}"/>
            
        <velocity:merge
                name="${mdaMappingsDir}/WebMergeMappings.xml"
                basedir="${mdaTemplatesMappingsDir}"
                template="WebMergeMappings.xml.vsl"/>
        </j:if>

    </goal>

  <!--==================================================================
              Creates the app subproject directory.
        ==================================================================-->
    <goal name="andromdapp:generate-app-subproject"
          prereqs="andromdapp:init"
          description="private internal goal">

        <j:set var="moduleName" value="app"/>

    <j:set var="moduleTemplatesDir" value="${templatesDir}/${moduleName}"/>

    <j:set var="moduleDir" value="${projectId}/${moduleName}"/>

    <attainGoal name="andromdapp:generate-module"/>

    <j:set var="metaInfDir" value="${moduleDir}/src/META-INF"/>

    <ant:mkdir dir="${metaInfDir}"/>

	<velocity:merge
          name="${metaInfDir}/jboss-app.xml"
          basedir="${moduleTemplatesDir}/src/META-INF"
          template="jboss-app.xml.vsl"/>

    </goal>

  <!--==================================================================
              Creates the common subproject directory.
        ==================================================================-->
    <goal name="andromdapp:generate-common-subproject"
          prereqs="andromdapp:init"
          description="private internal goal">

        <j:set var="moduleName" value="common"/>

        <j:set var="moduleTemplatesDir" value="${templatesDir}/${moduleName}"/>

        <j:set var="moduleDir" value="${projectId}/${moduleName}"/>

        <attainGoal name="andromdapp:generate-module"/>

        <velocity:merge
            name="${moduleDir}/maven.xml"
            basedir="${moduleTemplatesDir}"
            template="maven.xml.vsl"/>

        <ant:mkdir dir="${moduleDir}/${javaSrcDir}"/>

        <!-- Somente para durante a compilacao termos um jar do common -->

        <ant:mkdir dir="${moduleDir}/target/src"/>
    </goal>


    <!--==================================================================
              Creates a core subproject, its expected the ${moduleName} is
              defined.
        ==================================================================-->

    <goal name="andromdapp:generate-core-subproject"
          prereqs="andromdapp:init"
          description="private internal goal">

    <maven:param-check value="${moduleName}" fail="true">
                Property "moduleName" is not set, please define before running 'andromdapp:generate-core-subproject'
        </maven:param-check>

    <j:set var="moduleTemplatesDir" value="${templatesDir}/${moduleName}"/>

	<j:set var="moduleDir" value="${projectId}/core/${pasta}"/>

        <attainGoal name="andromdapp:generate-module"/>

        <j:if test ="${modulos == 'true'}">
		<velocity:merge
			name="${projectId}/core/maven.xml"
			basedir="${templatesDir}/core/"
			template="maven.xml.vsl"/>
          
		<velocity:merge
			name="${projectId}/core/project.xml"
			basedir="${templatesDir}/core/"
			template="project.xml.vsl"/>
		
		<velocity:merge
			name="${projectId}/core/project.properties"
			basedir="${templatesDir}/core/"
			template="project.properties.vsl"/>

        </j:if>
        

        <velocity:merge
          name="${projectId}/core/${pasta}/maven.xml"
          basedir="${templatesDir}/ejb/"
          template="maven.xml.vsl"/>
          
        <velocity:merge
          name="${projectId}/core/${pasta}/project.xml"
          basedir="${templatesDir}/ejb/"
          template="project.xml.vsl"/>
        

        
        <j:set var="confDir" value="${moduleTemplatesDir}/conf"/>
        
	<ant:available
            file="${confDir}"
            type="dir"
            property="confDirAvailable"/>
        
	<j:if test="${confDirAvailable != null}">
            <ant:copy todir="${moduleDir}">
                <ant:fileset dir="${moduleTemplatesDir}">
                    <ant:include name="conf/**/*"/>
                </ant:fileset>
            </ant:copy>
        </j:if>
        
    </goal>
	

    <!--==================================================================
              Creates the ejb subproject directory.
        ==================================================================-->
    
    <goal name="andromdapp:generate-ejb-subproject"
          description="private internal goal">
        
	<j:if test="${modulos == 'true'}">
            <j:set var="pasta" value="cs"/>
        </j:if>
        
	<j:set var="moduleName" value="ejb"/>
        
	<attainGoal name="andromdapp:generate-core-subproject"/>

	<j:if test = "${modulos == 'true'}">
		<ant:mkdir dir="${moduleDir}/compartilhado/${javaSrcDir}"/>
		<ant:mkdir dir="${moduleDir}/compartilhado/target/src"/>

		<velocity:merge
			name="${moduleDir}/compartilhado/maven.xml"
			basedir="${moduleTemplatesDir}/compartilhado"
			template="compartilhadoMaven.xml.vsl"/>
		<velocity:merge
			name="${moduleDir}/compartilhado/project.xml"
			basedir="${moduleTemplatesDir}/compartilhado"
			template="compartilhadoProject.xml.vsl"/>

		<ant:mkdir dir="${moduleDir}/initial/${javaSrcDir}"/>
		<ant:mkdir dir="${moduleDir}/initial/target/src"/>

		<velocity:merge
			name="${moduleDir}/initial/maven.xml"
			basedir="${moduleTemplatesDir}/initial"
			template="maven.xml.vsl"/>
		<velocity:merge
			name="${moduleDir}/initial/project.xml"
			basedir="${moduleTemplatesDir}/initial"
			template="project.xml.vsl"/>
		<velocity:merge
			name="${moduleDir}/initial/project.properties"
			basedir="${moduleTemplatesDir}/initial"
			template="project.properties.vsl"/>
	</j:if>

	<j:if test ="${modulos == 'false'}">
		<ant:mkdir dir="${moduleDir}/${javaSrcDir}"/>
		<ant:mkdir dir="${moduleDir}/target/src"/>
	</j:if>
    </goal>

    <!--==================================================================
              Creates the hibernate subproject directory.
        ==================================================================-->

    <!-- usado so na modularizacao-->
    <goal name="andromdapp:generate-hibernate-subproject"
          description="private internal goal">
        
	<j:set var="moduleName" value="hibernate"/>
        <j:set var="pasta" value="cd"/>
        
	<attainGoal name="andromdapp:generate-core-subproject"/>
        
	<velocity:merge
          name="${moduleDir}/maven.xml"
          basedir="${moduleTemplatesDir}"
          template="maven.xml.vsl"/>
        
	<velocity:merge
          name="${moduleDir}/project.xml"
          basedir="${moduleTemplatesDir}"
          template="project.xml.vsl"/>
    
    <velocity:merge
          name="${moduleDir}/project.properties"
          basedir="${moduleTemplatesDir}"
          template="project.properties.vsl"/>

	<ant:mkdir dir="${moduleDir}/${javaSrcDir}"/>
	<ant:mkdir dir="${moduleDir}/target/src"/>

    </goal>

    
    <!--==================================================================
              Creates the web subproject directory.
        ==================================================================-->
    <goal name="andromdapp:generate-web-subproject"
          prereqs="andromdapp:init"
          description="private internal goal">

        <j:set var="moduleName" value="web"/>
        
	<j:set var="moduleTemplatesDir" value="${templatesDir}/${moduleName}"/>
        
	<j:set var="moduleDir" value="${projectId}/${moduleName}"/>

        <attainGoal name="andromdapp:generate-module"/>
        
	<velocity:merge
          name="${moduleDir}/project.properties"
          basedir="${moduleTemplatesDir}"
          template="project.properties.vsl"/>

        <velocity:merge
          name="${moduleDir}/maven.xml"
          basedir="${moduleTemplatesDir}"
          template="maven.xml.vsl"/>

	<j:if test ="${modulos == 'false'}">
		<ant:mkdir dir="${moduleDir}/${javaSrcDir}"/>
		<ant:mkdir dir="${moduleDir}/target/src"/>
	</j:if>

	<j:if test ="${modulos == 'false'}">
			<ant:mkdir dir="${moduleDir}/${javaSrcDir}"/>
			<ant:mkdir dir="${moduleDir}/target/src"/>
		</j:if>
	
		<!-- ADICIONA O HELP SE FOR MODULARIZADO -->
		
		<j:if test ="${modulos == 'true'}">
		
			<ant:mkdir dir="${moduleDir}/help/src/java/WEB-INF"/>	
			
			<velocity:merge
          		name="${moduleDir}/help/src/java/WEB-INF/jboss-web.xml"
          		basedir="${moduleTemplatesDir}/help/src/java/WEB-INF"
          		template="jboss-web.xml.vsl"/>
          	<velocity:merge
          		name="${moduleDir}/help/src/java/WEB-INF/web.xml"
          		basedir="${moduleTemplatesDir}/help/src/java/WEB-INF"
          		template="web.xml.vsl"/>
          	<velocity:merge
          		name="${moduleDir}/help/maven.xml"
          		basedir="${moduleTemplatesDir}/help"
          		template="maven.xml.vsl"/>
          	<velocity:merge
          		name="${moduleDir}/help/project.xml"
          		basedir="${moduleTemplatesDir}/help"
          		template="project.xml.vsl"/>
          	<velocity:merge
          		name="${moduleDir}/help/project.properties"
          		basedir="${moduleTemplatesDir}/help"
          		template="project.properties.vsl"/>
		</j:if>
		
		<!-- ADICIONA RECURSOS DO LAYOUT (STRUTS) -->
	
		<j:if test ="${struts == 'true'}">
			<j:if test ="${modulos == 'false'}">
				<j:set var="layoutWebDir" value="${projectId}/${moduleName}/src/jsp/layout/default"/>
			</j:if>			
			<j:if test ="${modulos == 'true'}">
				<j:set var="layoutWebDir" value="${projectId}/${moduleName}/layout/src/jsp/default"/>	
				<ant:copy todir="${projectId}/${moduleName}/layout" file="${moduleTemplatesDir}/layout-config/project.properties"/>
				<velocity:merge
          			name="${projectId}/${moduleName}/layout/project.xml"
          			basedir="${moduleTemplatesDir}/layout-config"
          			template="project.xml.vsl"/>
				<velocity:merge
          			name="${projectId}/${moduleName}/layout/maven.xml"
          			basedir="${moduleTemplatesDir}/layout-config"
          			template="maven.xml.vsl"/>
          		<ant:copy todir="${projectId}/${moduleName}/layout/src/java/WEB-INF" file="${moduleTemplatesDir}/layout-config/struts-config.xml"/>
          		<velocity:merge
          			name="${projectId}/${moduleName}/layout/src/java/WEB-INF/web.xml"
          			basedir="${moduleTemplatesDir}/layout-config"
          			template="web.xml.vsl"/>
				<velocity:merge
          			name="${projectId}/${moduleName}/layout/src/java/WEB-INF/jboss-web.xml"
          			basedir="${moduleTemplatesDir}/layout-config"
          			template="jboss-web.xml.vsl"/>
			</j:if>			
				
			<ant:mkdir dir="${layoutWebDir}"/>		
	
	        <ant:copy todir="${layoutWebDir}">
	            <ant:fileset dir="${moduleTemplatesDir}/layout"/>
	        </ant:copy>
					        
	        <ant:mkdir dir="${layoutWebDir}/conf"/>

	        
	        <velocity:merge
          			name="${layoutWebDir}/conf/cabecalho.jsp"
          			basedir="${moduleTemplatesDir}/layout-include-config"
          			template="cabecalho.jsp.vsl"/>
          			
          	<velocity:merge
          			name="${layoutWebDir}/conf/rodape.jsp"
          			basedir="${moduleTemplatesDir}/layout-include-config"
          			template="rodape.jsp.vsl"/>
          			
          	<velocity:merge
          			name="${layoutWebDir}/conf/include-stylesheets.jsp"
          			basedir="${moduleTemplatesDir}/layout-include-config"
          			template="include-stylesheets.jsp.vsl"/>
          	
          	<velocity:merge
          			name="${layoutWebDir}/conf/include-javascripts.jsp"
          			basedir="${moduleTemplatesDir}/layout-include-config"
          			template="include-javascripts.jsp.vsl"/>
	        
		</j:if>
        
        <!-- ADICIONA RECURSOS DO LAYOUT - FIM -->        

    </goal>

    <!--==================================================================
              Creates the jbpm subproject directory.
        ==================================================================-->
    <goal name="andromdapp:generate-jbpm-subproject"
          prereqs="andromdapp:init"
          description="private internal goal">

        <j:set var="moduleName" value="jbpm"/>
        <j:set var="moduleTemplatesDir" value="${templatesDir}/${moduleName}"/>
        <j:set var="moduleDir" value="${projectId}/workflow"/>
        <attainGoal name="andromdapp:generate-module"/>
        <!-- copy remaining default sources -->
        <ant:copy todir="${moduleDir}">
            <ant:fileset dir="${moduleTemplatesDir}">
                <ant:include name="src/sar/**/*"/>
            </ant:fileset>
        </ant:copy>
        <!-- create an empty build directory so that maven doesn't complain
             when building the ear until model content is added -->
        <ant:mkdir dir="${moduleDir}/target/src"/>

    </goal>


    <!--==================================================================
              Creates the spring subproject directory.
        ==================================================================-->
    <goal name="andromdapp:generate-spring-subproject"
          prereqs="andromdapp:init"
          description="private internal goal">
        <j:set var="moduleName" value="spring"/>
        <j:set var="moduleTemplatesDir" value="${templatesDir}/${moduleName}"/>
        <j:set var="pasta" value="string"/>
        <j:set var="moduleDir" value="${projectId}/core/${pasta}"/>
        <ant:mkdir dir="${moduleDir}"/>
        <velocity:merge
            name="${moduleDir}/project.properties"
            basedir="${moduleTemplatesDir}"
            template="project.properties.vsl"/>

        <velocity:merge
          name="${moduleDir}/maven.xml"
          basedir="${moduleTemplatesDir}"
          template="maven.xml.vsl"/>

        <attainGoal name="andromdapp:generate-core-subproject"/>
    </goal>	


    <!--==================================================================
              Asks the generate questions to get the required input.
        ==================================================================-->
    
    <!-- primeiro objetivo efetivamente chamado-->	

    <goal name="andromdapp:init" description="private internal goal">

        <j:while test="${empty(projectCreator)}">
            <i:ask
                question="Please enter your first and last name (i.e. Rodrigo Salvador):"
                answer="projectCreator"/>
        </j:while>

        <j:while test="${empty(projectName)}">
            <i:ask
                question="Please enter the name of your J2EE project (i.e. Sistema Academico):"
                answer="projectName"/>
        </j:while>

        <j:while test="${empty(projectId)}">
            <i:ask
                question="Please enter the id for your J2EE project (i.e. sistemaacademico):"
                answer="projectId"/>
        </j:while>

        <j:while test="${empty(projectVersion)}">
            <i:ask
                question="Please enter a version for your project (i.e. 1.0):"
                answer="projectVersion"/>
        </j:while>

        <j:while test="${empty(baseProjectPackage)}">
            <i:ask
                question="Please enter the base package name for your J2EE project (i.e. br.mdarte.exemplo.academico):"
                answer="baseProjectPackage"/>
        </j:while>
<!--
        <j:while test="${empty(projectType) or (projectType ne 'tomcat' and projectType ne 'jboss')}">
            <i:ask
                question="Would you use jboss or tomcat (enter 'jboss' or 'tomcat')?"
                answer="projectType"/>
        </j:while>
-->
        <j:set var="projectType" value="jboss"/>

        <j:choose>
            <j:when test="${projectType eq 'jboss'}">
            	 <j:if test="${securityTypeAnswer eq 'yes'}">
            	 		<j:set var="oauth" value="${oauth eq 'yes'}"/>
            	 </j:if>
                <j:while test="${empty(securityAnswer) or (securityAnswer ne 'yes' and securityAnswer ne 'no')}">
                    <i:ask
                        question="Would you like to enable security? (enter 'yes' or 'no')?"
                        answer="securityAnswer"/>
                </j:while>
                <j:if test="${securityAnswer eq 'yes'}">
                		<j:while test="${(securityTypeAnswer ne 'yes' and securityTypeAnswer ne 'no')}" >
            				<i:ask question="Would you like to use oAuth (enter 'yes' or 'no') ?" answer="securityTypeAnswer" />
            	 		</j:while>
                        <j:while test="${(controleAcessoAnswer ne 'yes' and controleAcessoAnswer ne 'no')}" >
                        	<i:ask question="Would you like to use MDArte's default Controle Acesso (enter 'yes' or 'no') ?" answer="controleAcessoAnswer" />
                        </j:while>
                        <j:if test="${controleAcessoAnswer eq 'yes'}">
                        	<j:set var="controleAcessoDefault" value="${controleAcesso eq 'yes'}"/>
                        </j:if>
                </j:if>
            </j:when>
        </j:choose>

        <j:while test="${empty(modularizado) or (modularizado ne 'yes' and modularizado ne 'no')}">
            <i:ask
                question="Would you like to use modules (enter 'yes' or 'no')?"
                answer="modularizado"/>
        </j:while>

        <j:choose>
            <j:when test="${projectType eq 'jboss'}">
<!--
                <j:while test="${empty(persistenceType) or (persistenceType ne 'hibernate' and persistenceType ne 'ejb' and persistenceType ne 'spring')}">
                    <i:ask
                        question="Please enter the type of transactional/persistence cartridge to use (enter 'hibernate', 'ejb', or 'spring'):"
                        answer="persistenceType"/>
                </j:while>

                <j:if test="${persistenceType eq 'hibernate' or persistenceType eq 'spring'}">
                    <j:while test="${jbpm ne 'yes' and jbpm ne 'no'}">
                        <i:ask
                            question="Would you like to use the jBpm workflow engine, it uses Hibernate3 (enter 'yes' or 'no')?"
                            answer="jbpm"/>
                    </j:while>

                    <j:if test="${jbpm eq 'yes'}">
                        <- jBpm requires Hibernate 3 or later ->
                        <j:set var="hibernateVersion" value="3"/>
                    </j:if>
                    <j:while test="${empty(hibernateVersion) or (hibernateVersion ne '2' and hibernateVersion ne '3')}">
                        <i:ask
                            question="Please enter the hibernate version number  (enter '2' for 2.1.x or '3' for 3.0.x):"
                            answer="hibernateVersion"/>
                    </j:while>
                </j:if>
-->
                <j:set var="persistenceType" value="hibernate"/>
                <j:set var="jbpm" value="no"/>
                <j:set var="hibernateVersion" value="3"/>

                <j:while test="${empty(ejbVersion) or (ejbVersion ne '2' and ejbVersion ne '3')}">
                    <i:ask
                        question="Please enter the EJB version number (enter '2' or '3'):"
                        answer="ejbVersion"/>
                </j:while>
<!--
                <j:while test="${empty(webComponent) or (webComponent ne 'yes' and webComponent ne 'no')}">
                    <i:ask
                        question="Would you like a web application? (enter 'yes' or 'no'):"
                        answer="webComponent"/>
                </j:while>
-->
                <j:set var="webComponent" value="yes"/>
            </j:when>
            <j:otherwise>
                <j:while test="${jbpm ne 'yes' and jbpm ne 'no'}">
                    <i:ask
                        question="Would you like to use the jBpm workflow engine, it uses Hibernate3 (enter 'yes' or 'no')?"
                        answer="jbpm"/>
                </j:while>

                <j:if test="${jbpm eq 'yes'}">
                    <!-- jBpm requires Hibernate 3 or later -->
                    <j:set var="hibernateVersion" value="3"/>
                </j:if>

                <j:while test="${empty(hibernateVersion) or (hibernateVersion ne '2' and hibernateVersion ne '3')}">
                    <i:ask
                        question="Please enter the hibernate version number  (enter '2' for 2.1.x or '3' for 3.0.x):"
                        answer="hibernateVersion"/>
                </j:while>

                <j:set var="persistenceType" value="spring"/>

                <j:set var="webComponent" value="yes"/>
            </j:otherwise>
        </j:choose>

        <j:if test="${webComponent eq 'yes'}">
<!--
            <j:while test="${empty(webComponentType) or (webComponentType ne 'jsf' and webComponentType ne 'struts')}">
                <i:ask
                    question="Would you like your web tier to use JSF or Struts? (enter 'jsf' or 'struts'):"
                    answer="webComponentType"/>
            </j:while>
-->
            <j:set var="webComponentType" value="struts"/>

            <j:if test="${webComponentType eq 'struts'}">
                <j:while test="${empty(strutsVersion) or (strutsVersion ne '1' and strutsVersion ne '2')}">
                    <i:ask
                        question="Please enter the Struts version number (enter '1' or '2'):"
                        answer="strutsVersion"/>
                </j:while>
            </j:if>
        </j:if>

        <j:while test="${empty(junitComponent) or (junitComponent ne 'yes' and junitComponent ne 'no')}">
            <i:ask
                question="Would you like to enable the JUnit support for general testing? (enter 'yes' or 'no')?"
                answer="junitComponent"/>
        </j:while>

        <j:if test="${junitComponent eq 'yes' and webComponent eq 'yes'}">
            <j:while test="${empty(seleniumComponent) or (seleniumComponent ne 'yes' and seleniumComponent ne 'no')}">
                <i:ask
                    question="Would you like to enable the Selenium support for testing the web component? (enter 'yes' or 'no')?"
                    answer="seleniumComponent"/>
            </j:while>
        </j:if>
        
        <j:while test="${empty(jbossVersion) or (jbossVersion ne '4' and jbossVersion ne '6')}">
            <i:ask
                question="Please enter the JBoss version (4 or 6):"
                answer="jbossVersion"/>
        </j:while>
        
        <j:while test="${empty(databaseType) or (databaseType ne 'hypersonic' and databaseType ne 'oracle' and databaseType ne 'mysql' and databaseType ne 'postgres')}">
            <i:ask
                question="Please enter the database backend for the persistence layer: (enter 'hypersonic' or 'mysql' or 'oracle' or 'postgres')"
                answer="databaseType"/>
        </j:while>

        <!-- Fim das perguntas -->

        <j:set var="web" value="${webComponent eq 'yes'}"/>
        <j:set var="struts" value="${webComponentType eq 'struts'}"/>
        <j:set var="jsf" value="${webComponentType eq 'jsf'}"/>
        <j:set var="ejb" value="${persistenceType eq 'ejb'}"/>
        <j:set var="hibernate" value="${persistenceType eq 'hibernate'}"/>
        <j:set var="spring" value="${persistenceType eq 'spring'}"/>
        <j:set var="workflow" value="${jbpm eq 'yes'}"/>
        <j:set var="tomcat" value="${projectType eq 'tomcat'}"/>
        <j:set var="jboss" value="${projectType eq 'jboss'}"/>
        <j:set var="modulos" value="${modularizado eq 'yes'}"/>
        <j:set var="ejb3" value="${ejbVersion eq '3'}"/>
        <j:set var="struts2" value="${strutsVersion eq '2'}"/>
        <j:set var="junit" value="${junitComponent eq 'yes'}"/>
        <j:set var="selenium" value="${seleniumComponent eq 'yes'}"/>
        <j:set var="securityEnabled" value="${securityAnswer eq 'yes'}"/>
        <j:set var="mysql" value="${databaseType eq 'mysql'}"/>
        <j:set var="postgres" value="${databaseType eq 'postgres'}"/>
        <j:set var="oracle" value="${databaseType eq 'oracle'}"/>
        <j:set var="controleAcesso" value="${controleAcessoAnswer eq 'yes'}"/>
        <j:set var="oauth" value="${securityTypeAnswer eq 'yes'}"/>
        <j:set var="jboss6" value="${jbossVersion eq '6'}"/>

        <j:new var="stringUtils" className="org.apache.commons.lang.StringUtils"/>

        <j:set var="projectId" value="${stringUtils.deleteWhitespace(projectId)}"/>
        <j:set var="projectDir" value="${basedir}/${projectId}"/>
        <j:set var="projectPackage" value="${baseProjectPackage}"/>
        <j:set var="projectNameNoWhitespace" value="${stringUtils.deleteWhitespace(projectName)}"/>

        <util:replace
            var="packageDir"
            value="${packageName}"
            oldChar="."
            newChar="/"/>

        <j:set var="templatesDir" value="${plugin.resources}/andromdapp/templates/j2ee-app"/>

        <!-- the java source directory to use when creating java source directories -->
        <j:set var="javaSrcDir" value="src/java"/>

        <!-- set some variables so they aren't filled when executing velocity -->
        <j:set var="dummy" value="${pom.setGroupId('${pom.groupId}')}"/>
        <j:set var="dummy" value="${pom.setArtifactId('${pom.artifactId}')}"/>

        <ant:echo>ejbVersion: ${ejbVersion} - ejb3: ${ejb3}</ant:echo>
    </goal>
</project>