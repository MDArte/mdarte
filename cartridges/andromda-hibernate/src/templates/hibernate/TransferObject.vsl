##parse("templates/hibernate/hibernate.java.vm")
// license-header java merge-point
// Attention: Generated code! Do not modify by hand!
// Generated by: TransferObject.vsl in andromda-hibernate-cartridge.
## vamos gerar os TOs no diretorio de tranferencia e nao no diretorio de dados 

#set ($modelPackage = ".${modelPackageName}")
#set ($transferPackage = ".${transferPackageName}")
#set ($generatedFile = "${stringUtils.replace(${stringUtils.replace($class.packageName,$modelPackage,$transferPackage)}, '.', '/')}/${class.name}TO.java")
#if ($stringUtils.isNotBlank($class.packageName))
package ${stringUtils.replace($class.packageName,".${modelPackageName}",".${transferPackageName}")};
#end
import br.ufrj.coppetec.to.AbstractTOExample;
import br.ufrj.coppetec.to.AbstractTO;

/**
$class.getDocumentation(" * ")
 */
public abstract class ${class.name}TO extends
#if($class.generalization)
#set ($generalizacao = ${class.generalization.fullyQualifiedName})
#if ($generalizacao.indexOf(".${modelPackageName}.") > 0)
#set ($generalizacao = $generalizacao.concat("TOImpl"))
#set ($generalizacao = $stringUtils.replace($generalizacao, ".${modelPackageName}.", ".${transferPackageName}."))
	${generalizacao} implements  ${class.fullyQualifiedName}
#end
#else
	AbstractTO implements java.io.Serializable, ${class.fullyQualifiedName}
#end
{

    private static final long serialVersionUID = ${class.serialVersionUID}L;

    public ${class.name}TO()
    {
    }

#if ($stringUtils.isNotBlank($class.hibernateVersionProperty))
#set ($versionProperty = $class.hibernateVersionProperty)
#set ($versionPropertyCapitalized = $stringUtils.capitalize($class.hibernateVersionProperty))
    /**
     * Version property managed by Hibernate.
     */
    private int $versionProperty;

    public int get$versionPropertyCapitalized()
    {
        return this.$versionProperty;
    }

    public void set$versionPropertyCapitalized (int $versionProperty)
    {
        this.$versionProperty = $versionProperty;
        setUpdated();
    }    
#end

    private Boolean updated = false;

    public Boolean isUpdated(){
    	return updated #if($class.generalization) || super.isUpdated() #end;
    }
    
    private void setUpdated(){
		if(!isInitializing()) updated = true;
    }	
  
#if(!$class.abstract)
    private Boolean initializing = false;  
    
    public void beginInitialization(){
    	this.initializing = true;
    }
    
    public void finishInitialization(){
    	this.initializing = false;
    }
    
    public Boolean isInitializing(){
    	return this.initializing;
    }
#end
	private ${class.name}TOExample exemploTO;
    
	public ${class.name}TOExample getExemploTO() {
		return exemploTO;
	}

	public void setExemploTO(AbstractTOExample exemploTO) {
		this.exemploTO = (${class.name}TOExample)exemploTO;
#if($class.generalization)
		super.setExemploTO(exemploTO);
#end
	}


#foreach ($attribute in $class.attributes)
#set ($tipo = $attribute.type.fullyQualifiedName)
#if ($tipo.indexOf(".${modelPackageName}.") > 0)
#set ($tipo = $stringUtils.replace($tipo, ".${modelPackageName}.", ".${transferPackageName}."))

    private ${tipo}TO $attribute.name;

    /**
$attribute.getDocumentation("     * ")
     */
    $attribute.visibility $tipo ${attribute.getterName}()
    {
        return this.${attribute.name};
    }

    $attribute.visibility void ${attribute.setterName}($tipo $attribute.name)
    {
        this.${attribute.name} = $attribute.name;
#if(${attribute.identifier})
        if($attribute.name == null) setExemploTO(null);
#end
        setUpdated();
    }
#elseif($attribute.hstore)
	private $attribute.type.fullyQualifiedName<String,String> $attribute.name = new java.util.HashMap<String,String>(); 
	
	$attribute.visibility String ${attribute.getterName}(String key)
    {
        return String.valueOf(this.${attribute.name}.get(key));
    }
    
    $attribute.visibility java.util.Map<String,String> ${attribute.getterName}()
    {
        return (java.util.HashMap<String,String>) ((java.util.HashMap)this.${attribute.name}).clone();
    }
    
    $attribute.visibility void ${attribute.setterName}(String key, String value)
    {
		this.${attribute.name}.put(key,value);
    }
    
    $attribute.visibility void ${attribute.setterName}(java.util.Map<String,String> map)
    {
		this.${attribute.name} = (java.util.HashMap<String,String>) ((java.util.HashMap)map).clone();
    }
#else
    private $tipo $attribute.name;

    /**
$attribute.getDocumentation("     * ")
     */
    $attribute.visibility $tipo ${attribute.getterName}()
    {
        return this.${attribute.name};
    }

    $attribute.visibility void ${attribute.setterName}($tipo $attribute.name)
    {
        this.${attribute.name} = $attribute.name;
#if(${attribute.identifier})
        if($attribute.name == null) setExemploTO(null);
#end
        setUpdated();
    }
#end
#end
## Generate the relation methods.
#foreach ($associationEnd in $class.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable)
#set ($tipo = ${target.getterSetterTypeName})
#if ($tipo.indexOf(".${modelPackageName}.") > 0)
#set ($tipo = $stringUtils.replace($tipo, ".${modelPackageName}.", ".${transferPackageName}."))
#set ($tipo = $tipo.concat("TO"))
#else
#set($tipo = $target.getterSetterTypeName)
#end

#if ($target.many)
    private $tipo $target.name = $target.collectionTypeImplementation;
#else
    private $tipo $target.name;
#end

    /**
     * Get the $target.name
$target.getDocumentation("     * ")
     */
    public ${target.getterSetterTypeName} ${target.getterName}()
    {
    	boolean podeRecuperar = false;
    	if(this.exemploTO != null){
    		if(exemploTO.${target.getterName}() != null && !exemploTO.${target.getterName}().isEmpty()){
    			podeRecuperar = true;
    		}
    	}else{
    		podeRecuperar = true;
    	}
        if(podeRecuperar)
        	return this.${target.name};
        else
        	throw new RuntimeException("recuperacao.nao.permitida");
    }

    /**
     * Set the $target.name
     */
    public void ${target.setterName}(${target.getterSetterTypeName} $target.name)
    {
    	boolean podeAtualizar = false;
    	if(this.exemploTO != null){
    		if(exemploTO.${target.getterName}() != null && !exemploTO.${target.getterName}().isEmpty()){
    			podeAtualizar = true;
    		}
    	}else{
    		podeAtualizar = true;
    	}
        if(podeAtualizar){
        	this.${target.name} = (${tipo})${target.name};
        	setUpdated();
        }else
        	throw new RuntimeException("atualizacao.nao.permitida");            
    }

#if ($associationEnd.navigable)
#set ($rtipo = $target.getterSetterTypeName)
#if ($rtipo.indexOf(".${modelPackageName}.") > 0)
#set ($rtipo = $stringUtils.replace($rtipo, ".${modelPackageName}.", ".${transferPackageName}."))
#set ($rtipo = $rtipo.concat("TO"))

#else
#set($rtipo = $target.getterSetterTypeName)
#end

#set ($tipo = $target.type.fullyQualifiedName)
#if ($tipo.indexOf(".${modelPackageName}.") > 0)
#set ($tipo = $stringUtils.replace($tipo, ".${modelPackageName}.", ".${transferPackageName}."))
#set ($tipo = $tipo.concat("TO"))
    
#else
#set($tipo = $target.type.fullyQualifiedName)
#end

#set($exception = "")
#if($target.findTaggedValue($throwsVetoException).equals("true") || $associationEnd.findTaggedValue($throwsVetoException).equals("true") )
#set($exception = "throws java.beans.PropertyVetoException")
#end

    public void ${target.setterName}Inverse($target.getterSetterTypeName ${target.name}) $exception
    {
    	$rtipo temp = ($rtipo)this.${target.name};
		this.${target.name} = ($rtipo)$target.name;

#if($associationEnd.many)
#if($target.many)
		if(temp != null){
			for(java.util.Iterator it = temp.iterator(); it.hasNext();){
				$target.type.fullyQualifiedName ${stringUtils.uncapitalize($target.type.name)}Next = ($target.type.fullyQualifiedName)it.next();
				if(${stringUtils.uncapitalize($target.type.name)}Next.${associationEnd.getterName}() != null)
					${stringUtils.uncapitalize($target.type.name)}Next.${associationEnd.getterName}().remove(this);
			}
		}

		if(${target.name} != null){
			for(java.util.Iterator it = ${target.name}.iterator(); it.hasNext();){
				$tipo ${stringUtils.uncapitalize($target.type.name)}Next = ($tipo)it.next();
				if(!${stringUtils.uncapitalize($target.type.name)}Next.${associationEnd.getterName}().contains(this))
					${stringUtils.uncapitalize($target.type.name)}Next.${associationEnd.getterName}().add(this);
			}
		}
#else

    	if(temp != null){
    		if(temp.${associationEnd.getterName}() != null)
    			temp.${associationEnd.getterName}().remove(this);
    	}

    	if(${target.name} != null){
            if(!${target.name}.${associationEnd.getterName}().contains(this))
    			${target.name}.${associationEnd.getterName}().add(this);
    	}
#end
#else
#if($target.many)
	
    	if(temp != null){
    		for(java.util.Iterator it = temp.iterator();it.hasNext();){	
    			$tipo ${stringUtils.uncapitalize($target.type.name)}Next = ($tipo)it.next();
    			${stringUtils.uncapitalize($target.type.name)}Next.${associationEnd.setterName}(null);
    		}
    	}
    	
    	if(${target.name} != null){
    		for(java.util.Iterator it = ${target.name}.iterator();it.hasNext();){
    			$tipo ${stringUtils.uncapitalize($target.type.name)}Next = ($tipo)it.next();
    			${stringUtils.uncapitalize($target.type.name)}Next.${associationEnd.setterName}(this);
        	}
        }
#else
    	if(temp != null)
    		temp.${associationEnd.setterName}(null);
    
    	if(${target.name} != null)
    		${target.name}.${associationEnd.setterName}(this);
#end
#end
	
    }

#if($target.many )
#set($exception = "")
#if($target.findTaggedValue($throwsVetoException).equals("true") || $associationEnd.findTaggedValue($throwsVetoException).equals("true"))
#set($exception = "throws java.beans.PropertyVetoException")
#end

    public void add${stringUtils.capitalize($target.name)}($target.type.fullyQualifiedName ${stringUtils.uncapitalize($target.type.name)}Temp) $exception {
		if(${target.name} == null)
			${target.setterName}(${target.collectionTypeImplementation});
		
		if(!${target.name}.contains(${stringUtils.uncapitalize($target.type.name)}Temp))
			${target.name}.add(${stringUtils.uncapitalize($target.type.name)}Temp);
		
#if($associationEnd.navigable)
#if($associationEnd.many)
		$associationEnd.getterSetterTypeName $associationEnd.name = ${stringUtils.uncapitalize($target.type.name)}Temp.${associationEnd.getterName}();

		if(!${associationEnd.name}.contains(this))
			${associationEnd.name}.add(this);

		${stringUtils.uncapitalize($target.type.name)}Temp.${associationEnd.setterName}($associationEnd.name);
#else
		${stringUtils.uncapitalize($target.type.name)}Temp.${associationEnd.setterName}(this);
#end
#end
    	this.${target.setterName}(${target.name});
    }

    public void remove${stringUtils.capitalize($target.name)}($target.type.fullyQualifiedName ${stringUtils.uncapitalize($target.type.name)}Temp) $exception {
    	$rtipo ${target.name} = this.${target.getterName}();
		
		if(${target.name} != null){
    		${target.name}.remove(${stringUtils.uncapitalize($target.type.name)}Temp);
		}
		
#if($associationEnd.navigable)
#if($associationEnd.many)
		$associationEnd.getterSetterTypeName $associationEnd.name = ${stringUtils.uncapitalize($target.type.name)}Temp.${associationEnd.getterName}();
		
		if(${associationEnd.name} != null)
			${associationEnd.name}.remove(this);	

		${stringUtils.uncapitalize($target.type.name)}Temp.${associationEnd.setterName}($associationEnd.name);
#else
		${stringUtils.uncapitalize($target.type.name)}Temp.${associationEnd.setterName}(null);
#end

#end
    	this.${target.setterName}(${target.name});
    }
#end
## fim    

#end

#end
#end

#if(!$class.abstract)
	public String getEntityClassName(){
		return "${class.fullyQualifiedName}Impl";
	}
#end	

	public br.ufrj.coppetec.Entity getInstance(){
#if(!$class.abstract)
		return new ${class.name}TOImpl();
#else
		return null;
#end	
	}
#set ($identifiers = $class.getIdentifiers(false))

#renderEqualsMethod($class "${class.name}TO" $identifiers)

    public int hashCode(){
#if ($identifiers.empty)
		return super.hashCode();
#else
		int hashCode = super.hashCode();
#foreach ($attribute in $identifiers)
#set ($attrType = $attribute.type)
#if  ($attribute.getterSetterTypeName == "boolean")
		hashCode = 29 * hashCode + (${attribute.name} ? 1 : 0);
#elseif ($attrType.arrayType)
		// arrays are not part of the hashCode calculation
#elseif ($attrType.primitive)
		hashCode = 29 * hashCode + (int)${attribute.name};
#else
		hashCode = 29 * hashCode + (${attribute.name} == null ? 0 : ${attribute.name}.hashCode());
#end## if
#end## foreach
		return hashCode;
#end## $attributeSet.empty
    }

#foreach($temp in $class.allGeneralizations)
#set($pai = $temp)
#end
#if(!$pai)
#set($pai = $class)
#end

	public boolean instanceOf(Class<?> otherClass) {
		return otherClass.isAssignableFrom(get${pai.entityName}Class());
	}

	public Class<?> get${pai.name}Class() {
		return ${class.name}TOImpl.class;
	}
}