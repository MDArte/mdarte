#if($subentity.subentity)
#set($generatedFile = "${stringUtils.replace($subentity.packageName,'.','/')}/${subentity.name}.java")
#if($subentity.packageName)
package $subentity.packageName;
#end

import ${customTypesPackage}.util.JsonbUtils;

public abstract class $subentity.name implements ${userTypesPackage}.Subentity
{

#foreach($attribute in $subentity.attributes)
	private $attribute.type.fullyQualifiedName $attribute.name;
	
	public void ${attribute.setterName}($attribute.type.fullyQualifiedName $attribute.name) {
		this.${attribute.name} = $attribute.name;	
	}
	
	public $attribute.type.fullyQualifiedName ${attribute.getterName}() {
		return this.${attribute.name};
	}
#end

	public ${subentity.name}(java.util.Map<String,String> map) {
		if(map!=null) {
#foreach($attribute in $subentity.attributes)
#if($attribute.type.name.equals("String"))
			this.${attribute.name} = map.get("$attribute.name");
#elseif($attribute.type.name.equals("Integer"))
			if(map.get("$attribute.name") != null)
				this.$attribute.name = Integer.valueOf(map.get("$attribute.name"));
#elseif($attribute.type.name.equals("Double"))
			if(map.get("$attribute.name") != null)
				this.$attribute.name = Double.valueOf(map.get("$attribute.name"));
#elseif($attribute.type.name.equals("Boolean"))
			if(map.get("$attribute.name") != null)
				this.$attribute.name = Boolean.valueOf(map.get("$attribute.name"));
#elseif($attribute.type.name.equals("Long"))
			if(map.get("$attribute.name") != null)
				this.$attribute.name = Long.valueOf(map.get("$attribute.name"));
#elseif($attribute.type.name.equals("Date"))
			if(map.get("$attribute.name") != null)
				this.$attribute.name = new Date(map.get("$attribute.name"));
#elseif($attribute.type.name.equals("Boolean[]"))
			if(map.get("$attribute.name") != null)
				this.$attribute.name = JsonbUtils.parseJSONArrayToBooleanArray(map.get("$attribute.name"));
#elseif($attribute.type.name.equals("String[]"))
			if(map.get("$attribute.name") != null)
				this.$attribute.name = JsonbUtils.parseJSONArrayToStringArray(map.get("$attribute.name"));
#elseif($attribute.type.name.equals("Long[]"))
			if(map.get("$attribute.name") != null)
				this.$attribute.name = JsonbUtils.parseJSONArrayToLongArray(map.get("$attribute.name"));
#elseif($attribute.type.name.equals("Double[]"))
			if(map.get("$attribute.name") != null)
				this.$attribute.name = JsonbUtils.parseJSONArrayToDoubleArray(map.get("$attribute.name"));
#elseif($attribute.type.name.equals("Integer[]"))
			if(map.get("$attribute.name") != null)
				this.$attribute.name = JsonbUtils.parseJSONArrayToIntegerArray(map.get("$attribute.name"));
#elseif($attribute.type.name.equals("Date[]"))
			if(map.get("$attribute.name") != null)
				this.$attribute.name = JsonbUtils.parseJSONArrayToDateArray(map.get("$attribute.name"));
#elseif($attribute.isHstore())
			if(map.get("$attribute.name") != null)
				this.$attribute.name = JsonbUtils.parseHstoreStringToMap(map.get("$attribute.name"));
#end
#end
		}
	}

	public Endereco() {

	}
	
	public String toJson() {
		StringBuffer buffer = new StringBuffer("{ ");

#set($i = 0)
#foreach($attribute in $subentity.attributes)
#if($attribute.type.name == "String" || $attribute.type.name == "Date")	
		if(this.${attribute.getterName}() != null) {
			buffer.append("\"${attribute.name}\" : \""+this.${attribute.getterName}().toString()+"\"");
#if($i < $subentity.attributes.size() - 1)
			buffer.append(", ");
#end
		}
#set($i = $i + 1)
		
#elseif($attribute.type.name == "Float[]" || $attribute.type.name == "Long[]" || $attribute.type.name == "Integer[]" || $attribute.type.name == "Boolean[]" || $attribute.type.name == "String[]" || $attribute.type.name == "Date[]")
		if(this.${attribute.getterName}() != null) {
			buffer.append("\"${attribute.name}\" : " + JsonbUtils.parseArrayToJsonArray(this.${attribute.getterName}()).toString());
#if($i < $subentity.attributes.size() - 1)
			buffer.append(", ");
#end
		}
#set($i = $i + 1)		

#elseif($attribute.type.name == "Float" || $attribute.type.name == "Long" || $attribute.type.name == "Integer" || $attribute.type.name == "Boolean")		
		if(this.${attribute.getterName}() != null) {
			buffer.append("\"${attribute.name}\" : "+this.${attribute.getterName}().toString());
#if($i < $subentity.attributes.size() - 1)
			buffer.append(", ");
#end
		}
#set($i = $i + 1)
#elseif($attribute.isHstore())		
		if(this.${attribute.getterName}() != null) {
			buffer.append("\"${attribute.name}\" : "+JsonbUtils.parseHstoreMapToString(this.${attribute.getterName}()));
#if($i < $subentity.attributes.size() - 1)
			buffer.append(", ");
#end
		}
#set($i = $i + 1)		
#end
#end	
		if(buffer.toString().endsWith(", "))
			buffer.delete(buffer.length() - 2,buffer.length() - 1);
			
		buffer.append("}");
		
		return buffer.toString();
	}

	public $subentity.name clone () {
		$subentity.name temp = new ${subentity.name}Impl();
		
#foreach($attribute in $subentity.attributes)
		temp.${attribute.setterName}(this.${attribute.getterName}());
#end

		return temp;		
	}

#foreach($operation in $subentity.operations)
	protected abstract $operation.returnType.fullyQualifiedName handle${operation.name}($operation.typedArgumentList) throws Exception;
	
	$operation.visibility $operation.returnType.fullyQualifiedName ${operation.name}($operation.typedArgumentList) throws Exception{
#if(!$operation.returnType.name.equals("void"))
		Object value = this.handle${operation.name}($operation.argumentNames);
#else
		this.handle${operation.name}($operation.argumentNames);
#end
#if(!$operation.returnType.name.equals("void"))
		return ($operation.returnType.fullyQualifiedName) value;
#end
	}
#end
}
#end