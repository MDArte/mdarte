#set ($generatedFile = "${stringUtils.replace($customTypesPackage,'.','/')}/${utilDir}/ExportExcel.java")
#set ($package = "${stringUtils.replace($utilDir,'/','.')}")
package ${customTypesPackage}.${package};

import org.hibernate.Criteria;
import org.hibernate.ScrollableResults;
import org.hibernate.ScrollMode;
import org.hibernate.type.Type;

import org.apache.poi.hssf.usermodel.HSSFBorderFormatting;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDataFormat;
import org.apache.poi.hssf.util.HSSFColor;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.streaming.SXSSFCell;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Cookie;
import javax.servlet.ServletOutputStream;

public abstract class ExportExcel {

	private Criteria criteria;

	private String sheetName = "datasheet";

	protected String[] columns = null;

	private ScrollableResults results = null;

	protected HashMap<String,CellStyle> styles = new HashMap<String,CellStyle> ();

	protected HttpServletRequest request;

	protected HttpServletResponse response;

	protected String errorMessage; 

	private int rowNumber = 0;
	
	private String extension = "xlsx";

	public ExportExcel(Criteria criteria, String sheetName, String[] columns, HttpServletRequest request, HttpServletResponse response) {
		this.criteria = criteria;
		this.sheetName = sheetName;
		this.columns = columns;
		this.request = request;
		this.response = response;
		this.errorMessage = "Erro ao exportar planilha " + sheetName+ " .";
	}
	
	public ExportExcel(Criteria criteria, String sheetName, HttpServletRequest request, HttpServletResponse response) {
		this.criteria = criteria;
		this.sheetName = sheetName;
		this.request = request;
		this.response = response;
		this.errorMessage = "Erro ao exportar planilha " + sheetName+ " .";
	}
	
	public ExportExcel(Criteria criteria,HttpServletRequest request, HttpServletResponse response) {
		this.criteria = criteria;
		this.request = request;
		this.response = response;
		this.errorMessage = "Erro ao exportar planilha " + sheetName+ " .";
	}
		
	public Type getColumnType(int i) {
		return results.getType(i);
	}

	public int getResultsRowNumber() {
		return results.getRowNumber();
	}

	public int getSheetRowNumber(){
		return this.rowNumber;
	}

	private void columnsAutoResize(SXSSFSheet sheet){
		
		Row header = sheet.getRow(0);
		
		for(int i = header.getFirstCellNum(); i < header.getLastCellNum(); i++) {

			sheet.autoSizeColumn(i);

		}

	}
	
	protected void setErrorMessage(String message) {
		this.errorMessage = message;
	}
	
	protected void setFileExtension(String extension) {
		this.extension = extension;
	}
	
	private void exportDatasheet(SXSSFWorkbook workbook) throws Exception {

		Cookie cookie = new Cookie("fimLoader", "fimLoader");

		cookie.setMaxAge(2);

		response.addCookie(cookie);
		response.setContentType("application/vnd.ms-excel");
		response.setHeader("Content-Disposition", "attachment;filename=\"" + sheetName + "." + extension + "\"");

		try {

			ServletOutputStream out = response.getOutputStream();
			
			workbook.write(out);
			
			out.flush();
			out.close();
		
			workbook.dispose();

		} catch(Exception exception) {

			throw new Exception(errorMessage, exception);

		}

	}

	public abstract void stylus(SXSSFWorkbook workbook);

	public abstract void header(SXSSFWorkbook workbook, SXSSFSheet sheet);

	public void line(SXSSFWorkbook workbook,SXSSFSheet sheet, Object[] resultsRow){
		
		Row row = sheet.createRow(getSheetRowNumber());

		SXSSFCell cell;	

		for(int i = 0; i < resultsRow.length; i++) {
		
			cell = (SXSSFCell) row.createCell(i);
			cell.setCellValue(String.valueOf(resultsRow[i]));
		
		}
		
	}
	
	public void run() throws Exception{
		SXSSFWorkbook workbook = null;
		workbook = new SXSSFWorkbook();
			
		if(workbook != null) {
			SXSSFSheet sheet = (SXSSFSheet)workbook.createSheet(sheetName);

			stylus(workbook);

			header(workbook,sheet);
			
			rowNumber++;

			if(criteria != null) {

				results = criteria.scroll(ScrollMode.FORWARD_ONLY);

			}
			
			if(results != null) {

				while(results.next()) {

					line(workbook, sheet, results.get());

					rowNumber++;

				}

			}
			
			columnsAutoResize(sheet);
			
			exportDatasheet(workbook);
			
		}
	}

}