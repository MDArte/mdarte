#set ($generatedFile = "${entity.packagePath}/${entity.entityName}Abstract.java")

// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntity.vsl in andromda-hibernate-cartridge.
// 
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end

#foreach($temp in $entity.allGeneralizations)
#set($pai = $temp)
#end

#if(!$pai)
#set($pai = $entity)
#end

import org.hibernate.Hibernate;
import org.hibernate.Session;
import org.hibernate.FlushMode;
import $customTypesPackage.${modelPackageName}.AbstractDAO;
import $customTypesPackage.${modelPackageName}.AbstractEntity;
import ${customTypesPackage}.${modelPackageName}.DAOException;
import ${stringUtils.replace($entity.fullyQualifiedName,".${modelPackageName}",".${transferPackageName}")}TO;
import ${stringUtils.replace($entity.fullyQualifiedName,".${modelPackageName}",".${transferPackageName}")}TOImpl;
import ${stringUtils.replace($entity.fullyQualifiedName,".${modelPackageName}",".${transferPackageName}")}TOExample;
import br.ufrj.coppetec.to.AbstractTO;
import br.ufrj.coppetec.to.AbstractTOExample;
#set ($util = "${stringUtils.replace($utilDir,'/','.')}")
import ${customTypesPackage}.${util}.PaginationStrategy;
import $customTypesPackage.${modelPackageName}.TOUtil;
#set ($sharp = "#")

/**
$entity.getDocumentation(" * ")
 */
public abstract class ${entity.entityName}Abstract
#set ($securityEnabled = $stringUtils.isNotBlank($securityRealm))
#if($entity.generalization)
    extends $entity.generalization.fullyQualifiedEntityImplementationName implements ${entity.fullyQualifiedName}
#if($securityEnabled && $entity.hasExactStereotype("User"))
	 ,accessControl.Operador
#end
#if ($entity.auditoria)
	 ,${customTypesPackage}.${modelPackageName}.AuditoriaEntity
#end
#else
    extends ${customTypesPackage}.${modelPackageName}.AbstractEntity implements java.io.Serializable, ${entity.fullyQualifiedName}
#if($securityEnabled && $entity.hasExactStereotype("User"))
	,accessControl.Operador
#end
#if ($entity.auditoria)
	 ,${customTypesPackage}.${modelPackageName}.AuditoriaEntity
#end
#end
#foreach ( $parent in $entity.abstractions)
        , ${parent.packageName}.$stringUtils.capitalize(${parent.name})
#end
{
	private final String ENTITY_KEY = "$entity.packageName.${entity.entityName}Abstract";
	
	public Boolean needUpdate(AbstractTO abstractTO){
		Boolean need = false;
		need = abstractTO.isUpdated();
		if(need) return true;
		if(((${entity.name}TO)abstractTO).getExemploTO() == null) return false;
		${entity.name}TO to = (${entity.name}TO)abstractTO;
#foreach ($associationEnd in $entity.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if($target.navigable)
		if((to.getExemploTO() != null && to.getExemploTO().${target.getterName}() != null && !to.getExemploTO().${target.getterName}().isEmpty()))
#if($target.many)
		need = need || TOUtil.isCollectionChanged(to.${target.getterName}(), this.${target.getterName}());
#else
		need = need || TOUtil.isEntityChanged((AbstractTO)to.${target.getterName}(), (AbstractEntity)this.${target.getterName}());
#end
#end
#end
		#if($entity.generalization)if(need == false) return super.needUpdate(abstractTO);#end
		return need;
	}

##Transforma TO num Bean
#set ($tipoTO = $stringUtils.replace(${entity.fullyQualifiedName}, ".${modelPackageName}.", ".${transferPackageName}."))
#set ($tipoTO = $tipoTO.concat("TO"))
    public static ${entity.name}Abstract getEntityFromTO($tipoTO to) throws Exception{
    	AbstractDAO.currentSession().setFlushMode(FlushMode.NEVER);
    	${entity.name}Abstract entity = (${entity.name}Abstract)AbstractEntity.getEntityInstanceFromTO(to,  new java.util.HashMap());
    	AbstractDAO.currentSession().setFlushMode(FlushMode.AUTO);
    	return entity;
    }

#if(!$entity.abstract)
    protected ${customTypesPackage}.${modelPackageName}.AbstractEntity getEntityFromTO(AbstractTO to, java.util.HashMap map) throws Exception{
    	if(map == null) map = new java.util.HashMap();
    	${entity.name}Impl bean = new ${entity.name}Impl();
    	return getEntityFromTO((${tipoTO})to, bean, map);
    }
#end

    protected ${entity.name}Abstract getEntityFromTO (${tipoTO} to, ${entity.name} bean, java.util.HashMap map) throws Exception 
    {
		if(to == null) return null;
		map.put(to.getClass().toString() + to.hashCode(), bean);

		if (to != null) {
			if(to.getId() == null){
				#renderConstructorBody("true")
			} else {
#if(!$entity.abstract)
				${entity.name}DAOImpl dao = new ${entity.name}DAOImpl(); 
				if(bean.getId() == null) bean = (${entity.name}Impl)dao.select(to.getId()).iterator().next();
				map.put(to.getClass().toString() + to.hashCode(), bean);
#if ($stringUtils.isNotBlank($entity.hibernateVersionProperty))
#set ($versionProperty = $entity.hibernateVersionProperty)
#set ($versionPropertyCapitalized = $stringUtils.capitalize($entity.hibernateVersionProperty))
				if(bean.get$versionPropertyCapitalized() != to.get$versionPropertyCapitalized()){
					throw new Exception("hibernate.version.is.different");	
				}
#end
#end
				#renderConstructorBody("false")
			}
			return (${entity.name}Abstract)bean;
		}
		return null;
	}

#foreach ($associationEnd in $entity.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable)
#if ($target.many)
#set ($typeTargetTO = $stringUtils.replace($target.type.fullyQualifiedName, ".${modelPackageName}.", ".${transferPackageName}."))   
    private $target.getterSetterTypeName construct$stringUtils.capitalize(${target.name})($target.getterSetterTypeName ${target.name}TO, $target.getterSetterTypeName ${target.name}Entity, java.util.HashMap map) throws Exception
	{
		boolean changed = TOUtil.isCollectionChanged(${target.name}TO,${target.name}Entity);
		java.util.Collection list;
		if(changed)
			list = new java.util.ArrayList();
		else
			list = ${target.name}Entity;
		if(${target.name}TO != null){    
			java.util.Iterator it = ${target.name}TO.iterator();
			while(it.hasNext()){
				${typeTargetTO}TO to = (${typeTargetTO}TO) it.next();
				${target.type.fullyQualifiedName}Abstract cd = (${target.type.fullyQualifiedName}Abstract)TOUtil.getEntityFromCollection(to, ${target.name}Entity);
				if(map.get(to.getClass().toString() + to.hashCode()) == null){
					cd = (${target.type.fullyQualifiedName}Abstract)AbstractEntity.getEntityInstanceFromTO(to, map);
				}else{
					cd = (${target.type.fullyQualifiedName}Abstract)map.get(to.getClass().toString() + to.hashCode());
				}
				if(changed) list.add(cd);
			}
		} 	
		return list;
	}
#end
#end
#end
## fim da transforacao

## Inicio da construcao do TO
    public ${entity.name}TOImpl buildTO(${entity.name}TOExample exemploTO) throws Exception{
    	return (${entity.name}TOImpl)this.buildTO(exemploTO,  new java.util.HashMap());
    }

#if(!$entity.abstract)
    public AbstractTO buildTO(AbstractTOExample exemploTO, java.util.HashMap map) throws Exception{
    	if(map == null) map = new java.util.HashMap();
    	${entity.name}TOImpl to = new ${entity.name}TOImpl();
    	to.beginInitialization();
    	mapEntityAttributes2TO(to);
    	mapEntityRelations2TO(to,TOUtil.getExample(exemploTO, this.getTOExample()), map);
    	to.finishInitialization();
    	if(to.getId() == null) to.setExemploTO(null);
    	return to;
    }
#end

    protected void mapEntityAttributes2TO(${entity.name}TO to){
#foreach ($attribute in $entity.attributes)
#set ($nome = $stringUtils.capitalize(${attribute.name}))
		to.set${nome}(this.${attribute.getterName}());
#end

#if ($stringUtils.isNotBlank($entity.hibernateVersionProperty))
#set ($versionProperty = $entity.hibernateVersionProperty)
#set ($versionPropertyCapitalized = $stringUtils.capitalize($entity.hibernateVersionProperty))
		to.set$versionPropertyCapitalized(this.get${versionPropertyCapitalized}());
#end
		
#if($entity.generalization)
		super.mapEntityAttributes2TO(to);
#end
    }

    protected void mapEntityRelations2TO(${entity.name}TO to, AbstractTOExample abstractExemploTO, java.util.HashMap map) throws Exception{
		map.put(this.getEntityKey() + this.hashCode(), to);	
		${entity.name}TOExample exemploTO = (${entity.name}TOExample)abstractExemploTO;
		if(abstractExemploTO != null){
			to.setExemploTO(exemploTO);
#foreach ($associationEnd in $entity.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable || ($associationEnd.child && $entity.foreignHibernateGeneratorClass))
#set ($tipo = $target.type.fullyQualifiedName)
#if ($tipo.indexOf(".${modelPackageName}.") > 0)
#set ($tipo = $stringUtils.replace($tipo, ".${modelPackageName}.", ".${transferPackageName}."))
#end
#if ($target.getterSetterTypeName.indexOf(".${modelPackageName}.") > 0)
     		if(exemploTO.${target.getterName}()!= null && !exemploTO.${target.getterName}().isEmpty() && this.${target.getterName}() != null){
				if(map.get(((AbstractEntity)this.${target.getterName}()).getEntityKey() + this.${target.getterName}().hashCode()) == null){
					${tipo}TO toTemp = (${tipo}TO)this.${target.name}.buildTO(TOUtil.getExample(exemploTO.${target.getterName}(), this.${target.name}.getTOExample()) , map);
					to.${target.setterName}(toTemp);
				}else{
					to.${target.setterName}((${tipo}TO)map.get(((AbstractEntity)this.${target.getterName}()).getEntityKey() + this.${target.getterName}().hashCode()));
				}
			}
#elseif ($target.many)
    		if(exemploTO.${target.getterName}()!=null && !exemploTO.${target.getterName}().isEmpty()){  
    			to.${target.setterName}(build$stringUtils.capitalize(${target.name})(exemploTO.${target.getterName}(), $target.name, map));
    		}
#end
#end
#end
		}
#if($entity.generalization)
		super.mapEntityRelations2TO(to,exemploTO, map);
#end
    }

#foreach ($associationEnd in $entity.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable)
#if ($target.many)
    private $target.getterSetterTypeName build$stringUtils.capitalize(${target.name})(java.util.Collection templates, ${target.getterSetterTypeName} ${target.name}, java.util.HashMap map) throws Exception
    {
    	java.util.ArrayList list = new java.util.ArrayList();
		
    	if(${target.name} != null) {
			java.util.Iterator it = ${target.name}.iterator();
			while(it.hasNext()){  
				${target.type.fullyQualifiedName}Abstract cd = (${target.type.fullyQualifiedName}Abstract)it.next();
				if(cd != null){
					if(map.get(cd.getEntityKey() + cd.hashCode()) == null){
#set ($typeTargetTO = $stringUtils.replace($target.type.fullyQualifiedName, ".${modelPackageName}.", ".${transferPackageName}."))
						${typeTargetTO}TO toTemp =  (${typeTargetTO}TO)cd.buildTO(TOUtil.getExample(templates, cd.getTOExample()), map);
						list.add(toTemp);
					}else{	  
						${typeTargetTO}TO toTemp = (${typeTargetTO}TO)map.get(cd.getEntityKey() + cd.hashCode());
						list.add(toTemp);
					}
				}
			}
		}
		return list;
	} 	
#end
#end
#end

##Fim da construcao do TO
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = ${entity.serialVersionUID}L;

#if ($stringUtils.isNotBlank($entity.hibernateVersionProperty))
#set ($versionProperty = $entity.hibernateVersionProperty)
#set ($versionPropertyCapitalized = $stringUtils.capitalize($entity.hibernateVersionProperty))
    /**
     * Version property managed by Hibernate.
     */
    private int $versionProperty;

    public int get$versionPropertyCapitalized()
    {
        return this.$versionProperty;
    }

    private void set$versionPropertyCapitalized (int $versionProperty)
    {
        this.$versionProperty = $versionProperty;
    }

#end
    public ${entity.entityName}Abstract(){
    
    }

#set ($identifiers = $entity.getIdentifiers(false))
#if(!$entity.abstract && $identifiers && $identifiers.size > 0)
    #renderConstructorMethod($entity $entity.entityName $identifiers)
#end
#foreach ( $attribute in $entity.attributes )
#set ($typeName = $attribute.type.fullyQualifiedName)
#if ($attribute.containsEmbeddedObject)
#set ($typeName = $attribute.type.fullyQualifiedEntityName)
#end
#if($attribute.findTaggedValue($throwsVetoException).equals("true"))
#set($exceptionList = "java.beans.PropertyVetoException")
#end
#if($attribute.isHstore())
	
	private $typeName $attribute.name = new java.util.HashMap<String,String>(); 
	
	$attribute.visibility String ${attribute.getterName}(String key)
    {
        return String.valueOf(this.${attribute.name}.get(key));
    }
    
    $attribute.visibility java.util.Map ${attribute.getterName}Map()
    {
        return (java.util.HashMap) ((java.util.HashMap)this.${attribute.name}).clone();
    }
    
    $attribute.visibility void ${attribute.setterName}(String key, String value)
    {
		this.${attribute.name}.put(key,value);
    }
    
    $attribute.visibility void ${attribute.setterName}Map(java.util.Map map)
    {
		this.${attribute.name} = (java.util.HashMap) ((java.util.HashMap)map).clone();
    }
    
#else
    private $typeName $attribute.name;

    /**
$attribute.getDocumentation("     * ")
     */
    $attribute.visibility $typeName ${attribute.getterName}()
    {
        return this.${attribute.name};
    }
    
#if($attribute.findTaggedValue($throwsVetoException).equals("true"))	
    $attribute.visibility void ${attribute.setterName}(${typeName} $attribute.name) throws $exceptionList
    {
    	this.${attribute.name} = $attribute.name;
    }
#else
    $attribute.visibility void ${attribute.setterName}(${typeName} $attribute.name)
    {
		this.${attribute.name} = $attribute.name;
    }
#end
#end

#end
## Generate the associations
#foreach ($associationEnd in $entity.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable || ($associationEnd.child && $entity.foreignHibernateGeneratorClass))
#set ($tipo = $target.getterSetterTypeName)
#if ($tipo.indexOf(".${modelPackageName}.") > 0)
#set ($tipo = $tipo.concat("Abstract"))
#else
#set($tipo = $target.getterSetterTypeName)
#end

#if ($target.many)
    private $tipo $target.name = $target.collectionTypeImplementation;
#else
    private $tipo $target.name;
#end

    /**
$target.getDocumentation("     * ")
     */
    public $target.getterSetterTypeName ${target.getterName}()
    {
    	return ${target.name};
    }

#if($target.findTaggedValue($throwsVetoException).equals("true"))
#set($exceptionList = "java.beans.PropertyVetoException")
#end
#if($target.findTaggedValue($throwsVetoException).equals("true"))	
    public void ${target.setterName}($target.getterSetterTypeName ${target.name}) throws $exceptionList
#else
    public void ${target.setterName}($target.getterSetterTypeName ${target.name})
#end
    {
    	this.${target.name} = ($tipo)$target.name;
    }

    ## (MDArte) codigo para setar nos dois lados da associacao para resolver o problema do inverse
#if ($associationEnd.navigable)
#set($exception = "")
#if($target.findTaggedValue($throwsVetoException).equals("true") || $associationEnd.findTaggedValue($throwsVetoException).equals("true") )
#set($exception = "throws java.beans.PropertyVetoException")
#end
#set ($rtipo = $target.getterSetterTypeName)
#if ($rtipo.indexOf(".${modelPackageName}.") > 0)
#set ($rtipo = $rtipo.concat("Abstract"))
#else
#set($rtipo = $target.getterSetterTypeName)   
#end
#set ($tipo = $target.type.fullyQualifiedName)
#if ($tipo.indexOf(".${modelPackageName}.") > 0)
#set ($tipo = $tipo.concat("Abstract"))
#else
#set($tipo = $target.type.fullyQualifiedName)   
#end
    public void ${target.setterName}Inverse($target.getterSetterTypeName ${target.name}) $exception
    {
		Hibernate.initialize(${target.name});
		$target.getterSetterTypeName temp = this.${target.name};
		this.${target.name} = ($rtipo)$target.name;

#if($associationEnd.many)	
#if($target.many)
    	if(temp != null){
    		for(java.util.Iterator it = temp.iterator(); it.hasNext();){
    			$target.type.fullyQualifiedName ${stringUtils.uncapitalize($target.type.name)}Next = ($target.type.fullyQualifiedName)it.next();
    			if(${stringUtils.uncapitalize($target.type.name)}Next.${associationEnd.getterName}() != null)
    			${stringUtils.uncapitalize($target.type.name)}Next.${associationEnd.getterName}().remove(this);
    		}
    	}

		if(${target.name} != null){
    		for(java.util.Iterator it = ${target.name}.iterator(); it.hasNext();){
                $target.type.fullyQualifiedName ${stringUtils.uncapitalize($target.type.name)}Next = ($target.type.fullyQualifiedName)it.next();
                Hibernate.initialize(${stringUtils.uncapitalize($target.type.name)}Next.${associationEnd.getterName}());
                if(!${stringUtils.uncapitalize($target.type.name)}Next.${associationEnd.getterName}().contains(this))
    				${stringUtils.uncapitalize($target.type.name)}Next.${associationEnd.getterName}().add(this);
			}
        }
#else
    	if(temp != null){
    		if(temp.${associationEnd.getterName}() != null)
    			temp.${associationEnd.getterName}().remove(this);
    	}

        if(${target.name} != null){
            Hibernate.initialize(${target.name}.${associationEnd.getterName}());

            if(!${target.name}.${associationEnd.getterName}().contains(this))
            ${target.name}.${associationEnd.getterName}().add(this);
		}
#end
#else
#if($target.many)
	
    	if(temp != null){
    		for(java.util.Iterator it = temp.iterator();it.hasNext();){	
    			$target.type.fullyQualifiedName ${stringUtils.uncapitalize($target.type.name)}Next = ($target.type.fullyQualifiedName)it.next();
    			${stringUtils.uncapitalize($target.type.name)}Next.${associationEnd.setterName}(null);
    		}
    	}
	
    	if(${target.name} != null){
    		for(java.util.Iterator it = ${target.name}.iterator();it.hasNext();){
    			$target.type.fullyQualifiedName ${stringUtils.uncapitalize($target.type.name)}Next = ($target.type.fullyQualifiedName)it.next();
    			${stringUtils.uncapitalize($target.type.name)}Next.${associationEnd.setterName}(this);
        	}
        }
#else

    	if(temp != null)
    		temp.${associationEnd.setterName}(null);

    	if(${target.name} != null)
    		${target.name}.${associationEnd.setterName}(this);
#end
#end

    }

#if($target.many )
#set($exception = "")
#if($target.findTaggedValue($throwsVetoException).equals("true") || $associationEnd.findTaggedValue($throwsVetoException).equals("true"))	
#set($exception = "throws java.beans.PropertyVetoException")
#end
    public void add${stringUtils.capitalize($target.name)}($target.type.fullyQualifiedName ${stringUtils.uncapitalize($target.type.name)}Temp) $exception{
    	Hibernate.initialize(${stringUtils.uncapitalize($target.type.name)}Temp);
    	Hibernate.initialize(${target.name});
		
		if(${target.name} == null)
			${target.setterName}(${target.collectionTypeImplementation});

    	if(!${target.name}.contains(${stringUtils.uncapitalize($target.type.name)}Temp))
    		${target.name}.add(${stringUtils.uncapitalize($target.type.name)}Temp);
#if($associationEnd.navigable)	
#if($associationEnd.many)

		$associationEnd.getterSetterTypeName $associationEnd.name = ${stringUtils.uncapitalize($target.type.name)}Temp.${associationEnd.getterName}();  
		
		Hibernate.initialize(${associationEnd.name});

    	if(!${associationEnd.name}.contains(this))
    		${associationEnd.name}.add(this);
	
		${stringUtils.uncapitalize($target.type.name)}Temp.${associationEnd.setterName}($associationEnd.name);
#else
		${stringUtils.uncapitalize($target.type.name)}Temp.${associationEnd.setterName}(this);
#end
#end
    	this.${target.setterName}(${target.name});
    }

    public void remove${stringUtils.capitalize($target.name)}($target.type.fullyQualifiedName ${stringUtils.uncapitalize($target.type.name)}Temp) $exception{
    	$target.getterSetterTypeName ${target.name} = this.${target.getterName}();
    	Hibernate.initialize(${stringUtils.uncapitalize($target.type.name)}Temp);
    	Hibernate.initialize(${target.name});
		
		if(${target.name} != null){
    		${target.name}.remove(${stringUtils.uncapitalize($target.type.name)}Temp);
		}
#if($associationEnd.navigable)
#if($associationEnd.many)

		$associationEnd.getterSetterTypeName $associationEnd.name = ${stringUtils.uncapitalize($target.type.name)}Temp.${associationEnd.getterName}();
		Hibernate.initialize(${associationEnd.name});
		
		if(${associationEnd.name} != null)
			${associationEnd.name}.remove(this);
			
		${stringUtils.uncapitalize($target.type.name)}Temp.${associationEnd.setterName}($associationEnd.name);
#else
		${stringUtils.uncapitalize($target.type.name)}Temp.${associationEnd.setterName}(null);
#end

#end
    	this.${target.setterName}(${target.name});
    }
#end

## fim    
#end
#end
#end
## (MDArte) Codigo para gerar get's com acesso a paginacao 
#foreach ($associationEnd in $entity.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable || ($associationEnd.child && $entity.foreignHibernateGeneratorClass))
#if ($target.many)

    public $target.getterSetterTypeName ${target.getterName}(PaginationStrategy paginacao)
    {
		try {
#set($parameters = "this.getId(), paginacao")
			return ${entity.name}DAOImpl.${target.getterName}By${entity.name}($parameters);
        } catch(DAOException daoe) {
			daoe.printStackTrace();
        }
        return null;
    }

#end
#end
#end
## Fim 
## (MDArte) Retirei a parte que colocava os metodos da classe de entidade na propria entidade e passei para o DAO
#foreach ($operation in $entity.businessOperations)
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
#set ($listaAtributos = $operation.typedArgumentList)
#if($operation.findTaggedValue($daoMethod) && $operation.findTaggedValue($daoMethod).equals("false"))
#if ($operation.exceptionsPresent)

    protected abstract $returnType.fullyQualifiedName handle${stringUtils.capitalize(${operation.name})} ($listaAtributos)
        throws $operation.exceptionList;
#else
    protected abstract $returnType.fullyQualifiedName handle${stringUtils.capitalize(${operation.name})} ($listaAtributos);
#end

#if ($operation.exceptionsPresent)
    $operation.visibility $returnType.fullyQualifiedName ${operation.name} ($listaAtributos)
        throws $operation.exceptionList {
        	try{
#else
    $operation.visibility $returnType.fullyQualifiedName ${operation.name} ($listaAtributos){
#end

#if ($operation.returnTypePresent)
            return handle${stringUtils.capitalize($operation.name)}($operation.argumentNames);
#else
            handle${stringUtils.capitalize($operation.name)}($operation.argumentNames);
#end
#if ($operation.exceptionsPresent)
	}
	
#foreach ( $exception in $operation.exceptions )
        catch ($exception.fullyQualifiedName e)
        {
           throw e;
        }
#end
#end
	}
#end
#end

#if ($generateEntityEqualsAndHashCode.equalsIgnoreCase('true'))
#set ($identifiers = $entity.getIdentifiers(false))
    /**
#if ($identifiers.empty)
     * This entity does not have any identifiers
#if ($entity.generalization)
     * but since it extends the <code>$entity.generalization.fullyQualifiedEntityImplementationName</code> class
     * it will simply delegate the call up there.
     *
     * @see ${entity.generalization.fullyQualifiedEntityName}${sharp}equals(Object)
#else
     * and is not extending any other entity,
     * so this method will only return <code>true</code> if the argument reference and <code>this</code>
     * refer to the same object.
#end
#else
#if ($entity.generalization)
     * Returns <code>true</code> if the argument is an $entity.entityName instance and all identifiers for this entity
     * equal the identifiers of the argument entity. The <code>equals</code> method of the parent entity
     * will also need to return <code>true</code>. Returns <code>false</code> otherwise.
     *
     * @see ${entity.generalization.fullyQualifiedEntityName}${sharp}equals(Object)
#else
     * Returns <code>true</code> if the argument is an $entity.entityName instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
#end
#end
     */
#renderEqualsMethod($entity $entity.entityName $identifiers)

    /**
#if ($identifiers.empty)
     * This entity does not have any identifiers
#if ($entity.generalization)
     * but since it extends the <code>$entity.generalization.fullyQualifiedEntityImplementationName</code> class
     * it will simply delegate the call up there.
     *
     * @see ${entity.generalization.fullyQualifiedEntityName}${sharp}hashCode()
#else
     * and is not extending any other entity,
     * so this method will only take the identifiers of this entity into account when calculating the hash code.
#end
#else
#if ($entity.generalization)
     * Returns a hash code based on this entity's identifiers and the hash code of the parent entity.
     *
     * @see ${entity.generalization.fullyQualifiedEntityName}${sharp}hashCode()
#else
     * Returns a hash code based on this entity's identifiers.
#end
#end
     */
#renderHashCodeMethod($entity $identifiers)
#end

##[Moises-COPPETEC]
##Codigo para criar um metodo que retorne uma classe subconjunto desta para ser usada no webService
#if($entity.hasStereotype("$wsdStereotype"))
#set($wsdPackage = '$entity.packageName')
#set($wsdPackage = $stringUtils.replace("$entity.packageName", "$modelPackageName", "$wsdPackageName"))
public $customTypesPackage.${wsdPackageName}.AbstractWS getWebServiceObj($customTypesPackage.${wsdPackageName}.AbstractWS wsObj, java.util.HashMap map){
	
	${wsdPackage}.${entity.entityName}WS webServiceData = null;
	
	if(map.get(${wsdPackage}.${entity.entityName}WS.class.toString() + this.getId().toString()) == null || wsObj != null){
		if(wsObj != null)
			webServiceData	= (${wsdPackage}.${entity.entityName}WS)wsObj;
		else
			webServiceData = new ${wsdPackage}.${entity.entityName}WS();

#foreach ( $attribute in $entity.attributes )
#if(!$attribute.hasStereotype("$excludesWSDStereotype"))
#set ($typeName = "${attribute.type.fullyQualifiedName}Abstract")
	webServiceData.${attribute.setterName}(this.${attribute.getterName}());    	
#end
#end

	map.put(webServiceData.getClass().toString() + this.getId().toString(), webServiceData);
	
	int i = 0;

#foreach ($associationEnd in $entity.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable || ($associationEnd.child && $entity.foreignHibernateGeneratorClass))
#if(!$target.hasStereotype("$excludesWSDStereotype") && $target.type.hasStereotype("$wsdStereotype"))
#set($wsdClassPackage = $target.type)
#set($wsdClassPackage = $stringUtils.replace("$wsdClassPackage.packageName", "$modelPackageName", "$wsdPackageName"))
#if (!$target.many)
    if(this.${target.getterName}() != null)	
    	webServiceData.${target.setterName}((${wsdClassPackage}.${target.type.name}WS)this.${target.name}.getWebServiceObj(null, map));	    
#else
    
    ${wsdClassPackage}.${target.type.name}WS array${target.name}[] = new ${wsdClassPackage}.${target.type.name}WS[this.${target.getterName}().size()];
    
    java.util.Iterator it${target.name} = this.${target.getterName}().iterator();
    
    i = 0;
    
    while(it${target.name}.hasNext()){
    	${target.type.packageName}.${target.type.name}Abstract target = (${target.type.packageName}.${target.type.name}Abstract)it${target.name}.next();
    	array${target.name}[i] = (${wsdClassPackage}.${target.type.name}WS)target.getWebServiceObj(null, map);
    	i++;
    }
    
    webServiceData.${target.setterName}(array${target.name});
#end
#end
#end
#end
#if($entity.generalization && $entity.generalization.hasStereotype("$wsdStereotype"))
	
	##super.setParentWebServiceObj(webServiceData, map);
	super.getWebServiceObj(webServiceData, map);
#end
	}else
	   webServiceData = (${wsdPackage}.${entity.entityName}WS)map.get(${wsdPackage}.${entity.entityName}WS.class.toString() + this.getId().toString());
	
	return webServiceData;	
}

#set($wsdPackage = '$entity.packageName')
#set($wsdPackage = $stringUtils.replace("$entity.packageName", "$modelPackageName", "$wsdPackageName"))
public void setWebServiceObj($customTypesPackage.${wsdPackageName}.AbstractWS abstractWS, java.util.HashMap map){

	${wsdPackage}.${entity.entityName}WS webServiceObj = (${wsdPackage}.${entity.entityName}WS)abstractWS;

	try{
#foreach ( $attribute in $entity.attributes )
#if(!$attribute.hasStereotype("$excludesWSDStereotype")&&!$attribute.hasStereotype("Identifier"))
#set ($typeName = $attribute.type.fullyQualifiedName)
		this.${attribute.setterName}(webServiceObj.${attribute.getterName}());
#end
#end

		map.put("${entity.name}" + webServiceObj.getId().toString(), this);
	
#foreach ($associationEnd in $entity.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable || ($associationEnd.child && $entity.foreignHibernateGeneratorClass))
#if(!$target.hasStereotype("$excludesWSDStereotype") && $target.type.hasStereotype("$wsdStereotype"))
#if (!$target.many)
		if(webServiceObj.${target.getterName}() != null){
			${target.getterSetterTypeName}Abstract ${target.name}Obj = null;

    		if(map.get("${target.type.name}" + webServiceObj.${target.getterName}().getId().toString()) == null){
    			${target.name}Obj = (${target.getterSetterTypeName}Abstract)Class.forName(webServiceObj.${target.getterName}().entidade()).newInstance();
				${target.name}Obj.setWebServiceObj(webServiceObj.${target.getterName}(), map);      
    			this.${target.setterName}(${target.name}Obj);
    		}else{
				${target.name}Obj = (${target.type.packageName}.${target.type.name}Impl)map.get("${target.type.name}" + webServiceObj.${target.getterName}().getId().toString()); 
				this.${target.setterName}(${target.name}Obj);
    		}
#if ($target.otherEnd.navigable)
#if(!$target.otherEnd.many)	
    		${target.name}Obj.${target.otherEnd.setterName}(this);
#elseif($target.otherEnd.many)
    		${target.name}Obj.${target.otherEnd.getterName}().add(this);
#end
#end
    	}
#else

		if(webServiceObj.${target.getterName}() != null){
			for(int i=0; i < webServiceObj.${target.getterName}().length;i++){
				${target.type.packageName}.${target.type.name}Impl obj = null;
			
				if(map.get("${target.type.name}" + webServiceObj.${target.getterName}()[i].getId().toString()) == null){
					if(webServiceObj.${target.getterName}()[i].entidade() != null){
						obj = (${target.type.packageName}.${target.type.name}Impl)Class.forName(webServiceObj.${target.getterName}()[i].entidade()).newInstance();
						obj.setWebServiceObj(webServiceObj.${target.getterName}()[i], map);
						//obj = new ${target.type.packageName}.${target.type.name}Impl(webServiceObj.${target.getterName}()[i], map);
					}
				} else {
					obj = (${target.type.packageName}.${target.type.name}Impl)map.get("${target.type.name}" + webServiceObj.${target.getterName}()[i].getId().toString());
				}

#foreach($backAssociationEnd in $target.type.associationEnds)
#set($backTarget = $backAssociationEnd.otherEnd)
#if($backTarget.navigable && !$backTarget.many && $backTarget.type.name.equals("${entity.name}"))
				obj.${backTarget.setterName}(this);
#end
#end

				this.${target.getterName}().add(obj);
			}
		}
#end
#end
#end
#end

#if($entity.generalization && $entity.generalization.hasStereotype("$wsdStereotype"))
		super.setWebServiceObj(webServiceObj, map);
#end
	}catch(Exception e){
		e.printStackTrace();
	}	
}
#end

#if (!$entity.abstract)
    /**
     * Constructs new instances of {@link ${entity.fullyQualifiedName}}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link ${entity.fullyQualifiedName}}.
         */
        public static final $entity.fullyQualifiedName newInstance()
        {
            return new ${entity.fullyQualifiedEntityImplementationName}();
        }
    }
#end
#if(!$entity.abstract)	
     public $customTypesPackage.${modelPackageName}.AbstractDAO getDaoImpl() {
         return new ${entity.name}DAOImpl();
     }
     @Deprecated
     public java.util.Collection THIS(){
     	java.util.Collection col = new java.util.ArrayList();
     	col.add(this);
     	return col;
     }
     public ${entity.entityName} inicializa(){
     	Hibernate.initialize(this);
     	return this;
     }
#end

	public br.ufrj.coppetec.Entity getInstance(){
#if(!$entity.abstract)
		return new ${entity.entityName}Impl();
#else
		return null;
#end
	}

#foreach($temp in $entity.allGeneralizations)
#set($pai = $temp)
#end
#if(!$pai)
#set($pai = $entity)
#end
	public boolean instanceOf(Class<?> otherClass) {
		return otherClass.isAssignableFrom(get${pai.entityName}Class());
	}

    public Class<?> get${pai.entityName}Class() {
        return ${entity.entityName}Impl.class;
    }	

#if($pai.hasStereotype("$visitorAdapterRoot"))
    public void accept(${pai.packageName}.${pai.name}VisitorAdapter visitor, Object object) {
        visitor.visit(this, object);
    }
    
    public void accept(Object object) {
        ${pai.packageName}.${pai.name}VisitorAdapter visitor = new ${pai.packageName}.${pai.name}VisitorAdapterImpl();
        visitor.visit(this, object);
    }
#end
    
#if(!$entity.abstract)
    public AbstractTOExample getTOExample(){
    	return ${entity.name}TOExample.newInstance();
    }
    
    public String getEntityKey(){
    	return ENTITY_KEY;
    }
#end

#if ($entity.auditoria)
	private String auditoriaLogin;

	public String getAuditoriaLogin() {
		return this.auditoriaLogin;
	}
	
	public void setAuditoriaLogin(String auditoriaLogin) {
		this.auditoriaLogin = auditoriaLogin;
	}

	private String auditoriaOperacao;
	
	public String getAuditoriaOperacao() {
		return this.auditoriaOperacao;
	}
	
	public void setAuditoriaOperacao(String auditoriaOperacao) {
		this.auditoriaOperacao = auditoriaOperacao;
	}

	private java.util.Date auditoriaDataHora;

	public java.util.Date getAuditoriaDataHora() {
		return this.auditoriaDataHora;
	}

	public void setAuditoriaDataHora(java.util.Date auditoriaDataHora) {
		this.auditoriaDataHora = auditoriaDataHora;
	}
#end
}